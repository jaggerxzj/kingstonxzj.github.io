<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>七皇</title>
  <icon>https://www.gravatar.com/avatar/f1ffc9e0a95c344bc9636e7512958903</icon>
  <subtitle>KingstonXZJ</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://qihuang7.top/"/>
  <updated>2020-04-09T08:35:33.700Z</updated>
  <id>https://qihuang7.top/</id>
  
  <author>
    <name>七皇</name>
    <email>kingstonxzj@qq.com</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>java多线程基础（九）：乐观锁和悲观锁</title>
    <link href="https://qihuang7.top/2020/04/09/%E5%A4%9A%E7%BA%BF%E7%A8%8B/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%9F%BA%E7%A1%80%EF%BC%88%E4%B9%9D%EF%BC%89%EF%BC%9A%E4%B9%90%E8%A7%82%E9%94%81%E5%92%8C%E6%82%B2%E8%A7%82%E9%94%81/"/>
    <id>https://qihuang7.top/2020/04/09/%E5%A4%9A%E7%BA%BF%E7%A8%8B/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%9F%BA%E7%A1%80%EF%BC%88%E4%B9%9D%EF%BC%89%EF%BC%9A%E4%B9%90%E8%A7%82%E9%94%81%E5%92%8C%E6%82%B2%E8%A7%82%E9%94%81/</id>
    <published>2020-04-09T14:18:26.000Z</published>
    <updated>2020-04-09T08:35:33.700Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><h1 id="乐观锁和悲观锁"><a href="#乐观锁和悲观锁" class="headerlink" title="乐观锁和悲观锁"></a>乐观锁和悲观锁</h1><p>锁可以从不同的角度分类。其中，乐观锁和悲观锁是一种分类方式。</p><p><strong>悲观锁：</strong></p><p>悲观锁就是我们常说的锁。对于悲观锁来说，它总是认为每次访问共享资源时会发生冲突，所以必须对每次数据操作加上锁，以保证临界区的程序同一时间只能有一个线程在执行。</p><p><strong>乐观锁：</strong></p><p>乐观锁又称为“无锁”，顾名思义，它是乐观锁。乐观锁总是假设对共享资源的访问没有冲突，线程可以不停地执行，无需加锁也无需等待。而一旦多个线程发生冲突，乐观锁通常是使用一种称为CAS的技术来保证线程执行的安全性。</p><p>由于无锁操作中没有锁的存在，因此不可能出现死锁的情况，也就是说 <strong>乐观锁天生免疫死锁</strong>。</p><p><strong>乐观锁多用于“读多写少”的环境，避免频繁加锁影响性能；而悲观锁多用于“写多读少”的环境，避免频繁失败和重试影响性能。</strong></p><h1 id="CAS的概念"><a href="#CAS的概念" class="headerlink" title="CAS的概念"></a>CAS的概念</h1><p>CAS是乐观锁的一种实现，CAS的全称是：比较并交换（Compare And Swap）。在CAS中，有这样三个值：</p><ul><li>V：要更新的变量（var）</li><li>E：预期值（expected）</li><li>N：新值（new）</li></ul><p>比较并交换的过程如下：</p><p>判断V是否等于E，如果等于，将V的值设置为N；如果不等，说明已经有其他线程更新了V，则当前线程放弃更新，什么都不做。</p><p>所以这里的 <strong>预期值E本质上指的是“旧值”。</strong></p><p>一个简单的例子来解释这个过程：</p><blockquote><ol><li>如果有一个多个线程共享的变量i原本等于5，我现在在线程A中，想把它设置为新的值6;  </li><li>我们使用CAS来做这个事情；  </li><li>首先我们用i去与5对比，发现它等于5，说明没有被其它线程改过，那我就把它设置为新的值6，此次CAS成功，i的值被设置成了6；  </li><li>如果不等于5，说明i被其它线程改过了（比如现在i的值为2），那么我就什么也不做，此次CAS失败，i的值仍然为2。</li></ol></blockquote><p>在这个例子中，i 就是 V，5 就是 E，6 就是 N。</p><p>有没有可能我在判断了 i 为 5 之后，正准备更新它的新值的时候，被其他线程更改了 i 的值呢？</p><blockquote><p>答案是不会的，因为 <strong>CAS是一种原子操作</strong>，它是一种系统原语，是一条CPU的原子指令，从CPU层面保证它的原子性。</p></blockquote><p><strong>当多个线程同时使用CAS操作一个变量时，只有一个会胜出，并成功更新，其余均会失败，但失败的线程并不会被挂起，仅是被告知失败，并允许再次尝试，当然也允许失败的进程放弃操作。</strong></p><h1 id="CAS实现原子操作的三大问题"><a href="#CAS实现原子操作的三大问题" class="headerlink" title="CAS实现原子操作的三大问题"></a>CAS实现原子操作的三大问题</h1><h2 id="ABA问题"><a href="#ABA问题" class="headerlink" title="ABA问题"></a>ABA问题</h2><p>所谓ABA问题，就是一个值原来是A，变成了B，又变回了A。这个时候使用CAS是检查不出来变化的，但实际上却被更新了两次。</p><p>ABA问题的解决思路就是 <strong>在变量前面追加上版本号或者时间戳</strong>。从JDK1.5开始，JDK的atomic包里提供了一个类AtomicStampedReference类来解决ABA问题。</p><p>这个类的compareAndSet方法的作用首先是 <strong>检查当前引用是否等于预期引用 ，并检查当前标志是否等于预期标注</strong>，如果二者都相等，才使用CAS设置为新的值和标志。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">compareAndSet</span><span class="params">(V   expectedReference,</span></span></span><br><span class="line"><span class="function"><span class="params">                             V   newReference,</span></span></span><br><span class="line"><span class="function"><span class="params">                             <span class="keyword">int</span> expectedStamp,</span></span></span><br><span class="line"><span class="function"><span class="params">                             <span class="keyword">int</span> newStamp)</span> </span>{</span><br><span class="line">    Pair<v> current = pair;</v></span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">        expectedReference == current.reference &&</span><br><span class="line">        expectedStamp == current.stamp &&</span><br><span class="line">        ((newReference == current.reference &&</span><br><span class="line">          newStamp == current.stamp) ||</span><br><span class="line">         casPair(current, Pair.of(newReference, newStamp)));</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><h2 id="循环时间长开销大"><a href="#循环时间长开销大" class="headerlink" title="循环时间长开销大"></a>循环时间长开销大</h2><p>CAS多与自旋结合。如果自旋CAS长时间不成功，会占大量的CPU资源。</p><p>解决思路是 <strong>让JVM支持处理器提供的 pause指令。</strong></p><p>pause指令 能让自旋失败时cpu睡眠一小段时间再继续自旋，从而使得读操作的频率低很多，为解决内存顺序冲突而导致的CPU流水线重排的代价也会小很多。</p><h2 id="只能保证一个共享变量的原子操作"><a href="#只能保证一个共享变量的原子操作" class="headerlink" title="只能保证一个共享变量的原子操作"></a>只能保证一个共享变量的原子操作</h2><p>有两种解决方案：</p><ol><li>使用JDK 1.5开始就提供的 AtomicReference 类保证对象之间的原子性，把多个变量放到一个对象里面进行CAS操作</li><li>使用锁。锁内的临界区代码可以保证只有当前线程能操作。</li></ol></body></html>]]></content>
    
    <summary type="html">
    
      
      
        &lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;h1 id=&quot;乐观锁和悲观锁&quot;&gt;&lt;a href=&quot;#乐观锁和悲观锁&quot; class=&quot;headerlink&quot; title=&quot;乐观锁和悲观锁&quot;&gt;&lt;/a&gt;乐观锁和悲观锁&lt;/h1&gt;&lt;p&gt;锁可以从不同的角度分类。其中，乐观锁和悲观锁是一种
      
    
    </summary>
    
    
      <category term="java基础" scheme="https://qihuang7.top/categories/java%E5%9F%BA%E7%A1%80/"/>
    
      <category term="多线程" scheme="https://qihuang7.top/categories/java%E5%9F%BA%E7%A1%80/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
    
      <category term="java" scheme="https://qihuang7.top/tags/java/"/>
    
      <category term="基础" scheme="https://qihuang7.top/tags/%E5%9F%BA%E7%A1%80/"/>
    
      <category term="锁" scheme="https://qihuang7.top/tags/%E9%94%81/"/>
    
  </entry>
  
  <entry>
    <title>Java集合：Map（主要介绍 HashMap）</title>
    <link href="https://qihuang7.top/2020/04/09/Java%E9%9B%86%E5%90%88/Java%E9%9B%86%E5%90%88%EF%BC%9AMap%EF%BC%88%E4%B8%BB%E8%A6%81%E4%BB%8B%E7%BB%8DHashMap%EF%BC%89/"/>
    <id>https://qihuang7.top/2020/04/09/Java%E9%9B%86%E5%90%88/Java%E9%9B%86%E5%90%88%EF%BC%9AMap%EF%BC%88%E4%B8%BB%E8%A6%81%E4%BB%8B%E7%BB%8DHashMap%EF%BC%89/</id>
    <published>2020-04-09T10:27:26.000Z</published>
    <updated>2020-04-09T10:27:36.164Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><h1 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h1><p>Java集合Map的继承关系如下图<br><a href="https://myblog-file.oss-cn-shenzhen.aliyuncs.com/java/basic/Map%E7%BB%A7%E6%89%BF%E5%85%B3%E7%B3%BB%E5%9B%BE.PNG" data-fancybox="group" data-caption="Map的继承关系图" class="fancybox"><img alt="Map的继承关系图" title="Map的继承关系图" data-src="https://myblog-file.oss-cn-shenzhen.aliyuncs.com/java/basic/Map%E7%BB%A7%E6%89%BF%E5%85%B3%E7%B3%BB%E5%9B%BE.PNG" class="lazyload"></a></p><h2 id="HashMap（数组-链表-红黑树）"><a href="#HashMap（数组-链表-红黑树）" class="headerlink" title="HashMap（数组+链表+红黑树）"></a>HashMap（数组+链表+红黑树）</h2><p><a href="https://myblog-file.oss-cn-shenzhen.aliyuncs.com/java/basic/HashMap.PNG" data-fancybox="group" data-caption="hashMap" class="fancybox"><img alt="hashMap" title="hashMap" data-src="https://myblog-file.oss-cn-shenzhen.aliyuncs.com/java/basic/HashMap.PNG" class="lazyload"></a></p><p>HashMap根据键的hashCode值存储数据，大多数情况下可以直接定位到它的值，因而具有很快的访问速度，但遍历顺序却是不确定的。</p><p>HashMap最多只允许一条记录的键为null，允许多条记录的值为null。</p><blockquote><p>HashMap非线程安全，即任一时刻可以有多个线程同时写HashMap，可能会导致数据的不一致。<strong>如果需要满足线程安全，可以用 Collections 的 synchronizedMap方法 使HashMap具有线程安全的能力，或者使用ConcurrentHashMap。</strong></p></blockquote><h3 id="Java7-的HashMap结构"><a href="#Java7-的HashMap结构" class="headerlink" title="Java7 的HashMap结构"></a>Java7 的HashMap结构</h3><p><a href="https://myblog-file.oss-cn-shenzhen.aliyuncs.com/java/basic/Java7HashMap%E7%BB%93%E6%9E%84.PNG" data-fancybox="group" data-caption="java7的HashMap结构" class="fancybox"><img alt="java7的HashMap结构" title="java7的HashMap结构" data-src="https://myblog-file.oss-cn-shenzhen.aliyuncs.com/java/basic/Java7HashMap%E7%BB%93%E6%9E%84.PNG" class="lazyload"></a></p><p>大方向上，<strong>HashMap里面是一个数组，然后数组中每个元素是一个单向链表。</strong> 上图中，每个绿色的实体是嵌套类 Entry 的实例，Entry包含四个属性：<strong>key，value，hash值和用于单向链表的next</strong>。</p><h3 id="Java8-的HashMap结构"><a href="#Java8-的HashMap结构" class="headerlink" title="Java8 的HashMap结构"></a>Java8 的HashMap结构</h3><p>Java8 对 HashMap 进行了一些修改，最大的不同就是利用了红黑树，所以 <strong>由数组+链表+红黑树组成。</strong></p><p>根据Java7 HashMap的介绍，我们知道，查找的时候，根据 hash值 我们能够快速定位到数组的具体下标，但是之后，<strong>需要顺着链表一个个比较下去才能找到我们需要的，时间复杂度取决于链表的长度，为O(n)。</strong></p><p>为了降低这部分的开销，在java8中，<strong>当链表中的元素超过了8个以后，会将链表转换为红黑树</strong>，在这些位置进行查找的时候可以降低时间复杂度为O(logN)。</p><p><a href="https://myblog-file.oss-cn-shenzhen.aliyuncs.com/java/basic/Java8%E7%9A%84HashMap%E7%BB%93%E6%9E%84.PNG" data-fancybox="group" data-caption="Java8的HashMap结构" class="fancybox"><img alt="Java8的HashMap结构" title="Java8的HashMap结构" data-src="https://myblog-file.oss-cn-shenzhen.aliyuncs.com/java/basic/Java8%E7%9A%84HashMap%E7%BB%93%E6%9E%84.PNG" class="lazyload"></a></p><h2 id="关于红黑树的介绍这里先留个坑，以后会填上"><a href="#关于红黑树的介绍这里先留个坑，以后会填上" class="headerlink" title="关于红黑树的介绍这里先留个坑，以后会填上"></a>关于红黑树的介绍这里先留个坑，以后会填上</h2><h2 id="ConcurrentHashMap"><a href="#ConcurrentHashMap" class="headerlink" title="ConcurrentHashMap"></a>ConcurrentHashMap</h2><h3 id="Segment段"><a href="#Segment段" class="headerlink" title="Segment段"></a>Segment段</h3><p>ConcurrentHashMap和HashMap思路是差不多的，但是因为它 <strong>支持并发操作</strong>，所以要复杂一些。  </p><p>整个ConcurrentHashMap由一个个Segment组成，Segment代表 “部分” 或者 “一段” 的意思，所以很多地方都会将其描述为 <strong>分段锁</strong>。</p><h3 id="线程安全（Segment继承ReentrantLock加锁）"><a href="#线程安全（Segment继承ReentrantLock加锁）" class="headerlink" title="线程安全（Segment继承ReentrantLock加锁）"></a>线程安全（Segment继承ReentrantLock加锁）</h3><blockquote><p>ReentrantLock：可重入锁</p></blockquote><p>简单理解就是，<strong>ConcurrentHashMap 是一个 Segment数组，Segment通过继承ReentrantLock来进行加锁</strong>，所以每次需要加锁的操作锁住的是一个segment，这样 <strong>只要保证每个Segment是线程安全的，也就实现了全局的线程安全</strong>。</p><p><strong>java7的ConcurrentHashMap结构：</strong></p><p><a href="https://myblog-file.oss-cn-shenzhen.aliyuncs.com/java/basic/Java7%E7%9A%84ConcurrentHashMap%E7%BB%93%E6%9E%84.PNG" data-fancybox="group" data-caption="java7的ConcurrentHashMap结构" class="fancybox"><img alt="java7的ConcurrentHashMap结构" title="java7的ConcurrentHashMap结构" data-src="https://myblog-file.oss-cn-shenzhen.aliyuncs.com/java/basic/Java7%E7%9A%84ConcurrentHashMap%E7%BB%93%E6%9E%84.PNG" class="lazyload"></a></p><p><strong>java8的ConcurrentHashMap结构：也引入了红黑树</strong></p><h3 id="并行度（默认16）"><a href="#并行度（默认16）" class="headerlink" title="并行度（默认16）"></a>并行度（默认16）</h3><p>ConcurrentHashMap默认有16个Segments，所以理论上，最多可以同时支持16个线程并发写，只要它们的操作分别分布在不同的Segment上。</p><p>这个值可以在初始化的时候设置为其他值，但是一旦初始化以后，它是不可以扩容的。</p><p>再具体到每个Segment内部，其实每个Segment很象之前介绍的HashMap，不过他要保证线程安全，所以处理起来要麻烦些。</p><h2 id="HashTable（线程安全）"><a href="#HashTable（线程安全）" class="headerlink" title="HashTable（线程安全）"></a>HashTable（线程安全）</h2><p>HashTable是遗留类，很多映射的常用功能与HashMap类似，不同的是它继承自Dictionary类，并且线程是安全的，任一时间只有一个线程能写Hashtable，并发性不如ConcurrentHashMap，因为ConcurrentHashMap引入了分段锁。</p><p><strong>Hashtable 不建议在新代码中使用，不需要线程安全的场合可以用 HashMap 替换，需要线程安全的场合可以用 ConcurrentHashMap 替换。</strong></p><h2 id="TreeMap（可排序）"><a href="#TreeMap（可排序）" class="headerlink" title="TreeMap（可排序）"></a>TreeMap（可排序）</h2><p>TreeMap实现SortedMap接口，能够把它保存的记录根据键排序，默认是按键值得升序排序，也可以指定排序得比较器，当用Iterator遍历TreeMap时，得到的记录是排过序的。</p><p><strong>如果使用排序的映射，建议使用TreeMap。</strong></p><p>在使用TreeMap时，key 必须实现Comparable接口或者在构造TreeMap传入自定义的Comparator，否则在运行时会抛出ClassCastException类型的异常</p><h2 id="LinkedhashMap（记录插入顺序）"><a href="#LinkedhashMap（记录插入顺序）" class="headerlink" title="LinkedhashMap（记录插入顺序）"></a>LinkedhashMap（记录插入顺序）</h2><p>LinkedHashMap 是 HashMap 的一个子类，保存了记录的插入顺序，在用Iterator遍历LinkedHashMap时，先得到的记录肯定是先插入的，也可以在构造时带参数，按照访问次序排序。</p></body></html>]]></content>
    
    <summary type="html">
    
      
      
        &lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;h1 id=&quot;Map&quot;&gt;&lt;a href=&quot;#Map&quot; class=&quot;headerlink&quot; title=&quot;Map&quot;&gt;&lt;/a&gt;Map&lt;/h1&gt;&lt;p&gt;Java集合Map的继承关系如下图&lt;br&gt;&lt;a href=&quot;https://myb
      
    
    </summary>
    
    
      <category term="java基础" scheme="https://qihuang7.top/categories/java%E5%9F%BA%E7%A1%80/"/>
    
      <category term="集合" scheme="https://qihuang7.top/categories/java%E5%9F%BA%E7%A1%80/%E9%9B%86%E5%90%88/"/>
    
    
      <category term="java" scheme="https://qihuang7.top/tags/java/"/>
    
      <category term="基础" scheme="https://qihuang7.top/tags/%E5%9F%BA%E7%A1%80/"/>
    
      <category term="集合" scheme="https://qihuang7.top/tags/%E9%9B%86%E5%90%88/"/>
    
      <category term="HashMap" scheme="https://qihuang7.top/tags/HashMap/"/>
    
      <category term="红黑树" scheme="https://qihuang7.top/tags/%E7%BA%A2%E9%BB%91%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>Java集合：List和Set</title>
    <link href="https://qihuang7.top/2020/04/08/Java%E9%9B%86%E5%90%88/Java%E9%9B%86%E5%90%88%EF%BC%9AList%E5%92%8CSet/"/>
    <id>https://qihuang7.top/2020/04/08/Java%E9%9B%86%E5%90%88/Java%E9%9B%86%E5%90%88%EF%BC%9AList%E5%92%8CSet/</id>
    <published>2020-04-08T12:38:26.000Z</published>
    <updated>2020-04-08T17:16:40.608Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><h1 id="接口继承关系和实现"><a href="#接口继承关系和实现" class="headerlink" title="接口继承关系和实现"></a>接口继承关系和实现</h1><p>集合类存放在Java.util包中，主要有3种：set（集）、list（列表包含Queue）和map（映射）</p><ol><li>Collection：是集合List、Set、Queue的最基本的接口</li><li>Iterator：迭代器，可以通过迭代器遍历集合中的数据</li><li>Map：是映射表的基础接口</li></ol><p><a href="https://img-blog.csdn.net/20180810142406579?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L21ha2VsaXdlaTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" data-fancybox="group" data-caption="java集合基础关系图" class="fancybox"><img alt="java集合基础关系图" title="java集合基础关系图" data-src="https://img-blog.csdn.net/20180810142406579?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L21ha2VsaXdlaTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" class="lazyload"></a></p><h2 id="List"><a href="#List" class="headerlink" title="List"></a>List</h2><p>List是非常常用的数据类型，<strong>List是有序的Collection</strong>。List一共三个实现类：ArrayList、Vector和LinkedList</p><h3 id="ArrayList（数组）"><a href="#ArrayList（数组）" class="headerlink" title="ArrayList（数组）"></a>ArrayList（数组）</h3><p><a href="https://myblog-file.oss-cn-shenzhen.aliyuncs.com/java/basic/ArrayList.PNG" data-fancybox="group" data-caption="ArrayList" class="fancybox"><img alt="ArrayList" title="ArrayList" data-src="https://myblog-file.oss-cn-shenzhen.aliyuncs.com/java/basic/ArrayList.PNG" class="lazyload"></a></p><p>ArrayList内部是通过数组实现的，它允许对元素进行快速随机访问。</p><p>数组的缺点是每个元素之间不能有间隔，当数组大小不满足时需要增加存储能力，就要将已经有数组的数据复制到新的存储空间中。</p><p>当从ArrayList的中间位置插入或者删除元素时，需要对数组进行复制、移动，代价比较高。因此 <strong>它适合随机查找和遍历，不适合插入和删除。</strong></p><h3 id="Vector（数组实现、线程同步）"><a href="#Vector（数组实现、线程同步）" class="headerlink" title="Vector（数组实现、线程同步）"></a>Vector（数组实现、线程同步）</h3><p><a href="https://myblog-file.oss-cn-shenzhen.aliyuncs.com/java/basic/Vector.PNG" data-fancybox="group" data-caption="Vector" class="fancybox"><img alt="Vector" title="Vector" data-src="https://myblog-file.oss-cn-shenzhen.aliyuncs.com/java/basic/Vector.PNG" class="lazyload"></a></p><p>Vector也是通过数组实现的，不同的是它支持线程的同步，<strong>即某一时刻只有一个线程能写Vector，</strong> 避免多线程同时写而引起的不一致。但实现同步需要很高的花费，因此，<strong>访问它比访问ArrayList慢</strong></p><h3 id="LinkedList（链表）"><a href="#LinkedList（链表）" class="headerlink" title="LinkedList（链表）"></a>LinkedList（链表）</h3><p><a href="https://myblog-file.oss-cn-shenzhen.aliyuncs.com/java/basic/LinkedList.PNG" data-fancybox="group" data-caption="LinkedList" class="fancybox"><img alt="LinkedList" title="LinkedList" data-src="https://myblog-file.oss-cn-shenzhen.aliyuncs.com/java/basic/LinkedList.PNG" class="lazyload"></a></p><p><strong>LinkedList是用链表结构存储数据的，很适合数据的动态插入和删除</strong>，随机访问和遍历速度比较慢。</p><p>另外，他还提供了List接口中没有定义的方法，专门用于操作表头和表尾元素，<strong>可以当作堆、栈、队列和双向队列使用。</strong></p><h2 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h2><p>Set注重独一无二的性质，该体系集合用于存储无序的元素，值不能重复。</p><p>对象的相等性本质是对象的hashCode（java是依据对象的内存地址计算出的此序号）判断的，<strong>如果先要让两个不同对的对象视为相等的，就必须覆盖Object的hashCode方法和equals方法。</strong></p><h3 id="HashSet（Hash表）"><a href="#HashSet（Hash表）" class="headerlink" title="HashSet（Hash表）"></a>HashSet（Hash表）</h3><p><a href="https://myblog-file.oss-cn-shenzhen.aliyuncs.com/java/basic/HashSet.PNG" data-fancybox="group" data-caption="HashSet" class="fancybox"><img alt="HashSet" title="HashSet" data-src="https://myblog-file.oss-cn-shenzhen.aliyuncs.com/java/basic/HashSet.PNG" class="lazyload"></a></p><p>哈希表存放的值是哈希值。HashSet存储元素的顺序并不是按照存入时的顺序（和List显然不同），而是按照哈希值来存的，所以取数据也是按照哈希值取得。</p><p>元素的哈希值时通过元素的hashCode方法来获取的，<strong>HashSet首先判断两个元素的哈希值，如果哈希值一样，接着会比较equals方法。如果比较结果为true，HashSet就视为同一个元素。</strong></p><h4 id="哈希值相同且equals为false的元素时怎么存储呢？"><a href="#哈希值相同且equals为false的元素时怎么存储呢？" class="headerlink" title="哈希值相同且equals为false的元素时怎么存储呢？"></a>哈希值相同且equals为false的元素时怎么存储呢？</h4><p>就是在同样的哈希值下顺延（可以认为哈希值相同的元素放在一个哈希桶中）。也就是哈希一样的存一列。如图一表示hashCode值不相同的情况，图二表示hashCode值相同但equals值为false的情况</p><p><a href="https://myblog-file.oss-cn-shenzhen.aliyuncs.com/java/basic/hashSet%E7%9A%84%E5%AD%98%E5%82%A8%E6%96%B9%E5%BC%8F.PNG" data-fancybox="group" data-caption="hashSet的存储方式" class="fancybox"><img alt="hashSet的存储方式" title="hashSet的存储方式" data-src="https://myblog-file.oss-cn-shenzhen.aliyuncs.com/java/basic/hashSet%E7%9A%84%E5%AD%98%E5%82%A8%E6%96%B9%E5%BC%8F.PNG" class="lazyload"></a></p><p>HashSet通过hashCode值来确定元素在内存中的位置。一个hashCode位置上可以存放多个元素。</p><h3 id="TreeSet-二叉树"><a href="#TreeSet-二叉树" class="headerlink" title="TreeSet(二叉树)"></a>TreeSet(二叉树)</h3><p><a href="https://myblog-file.oss-cn-shenzhen.aliyuncs.com/java/basic/TreeSet.PNG" data-fancybox="group" data-caption="TreeSet" class="fancybox"><img alt="TreeSet" title="TreeSet" data-src="https://myblog-file.oss-cn-shenzhen.aliyuncs.com/java/basic/TreeSet.PNG" class="lazyload"></a></p><ol><li><p>TreeSet是使用二叉树的原理对新add()的对象按照指定的顺序排序（升序/降序），每增加一个对象都会进行排序，将对象插入到二叉树指定的位置</p></li><li><p>Integer和String对象都可以进行默认的TreeSet排序，而自定义类的对象是不可以的，<strong>自定义的类必须实现Comparable接口，并且覆写相应的CompareTo()函数</strong>，才可以正常使用</p></li><li><p>在覆写compare()函数时，要返回相应的值才能使TreeSet按照一定的顺序来排序</p></li><li><p>比较此对象与指定对象的顺序。如果该对象小于、等于或者大于指定对象，则分别返回负整数、零或正整数。</p></li></ol><h3 id="LinkedHashSet（HashSet-LinkedHashMap"><a href="#LinkedHashSet（HashSet-LinkedHashMap" class="headerlink" title="LinkedHashSet（HashSet+LinkedHashMap)"></a>LinkedHashSet（HashSet+LinkedHashMap)</h3><p><a href="https://myblog-file.oss-cn-shenzhen.aliyuncs.com/java/basic/LinkedHashSet.PNG" data-fancybox="group" data-caption="LinkedHashSet" class="fancybox"><img alt="LinkedHashSet" title="LinkedHashSet" data-src="https://myblog-file.oss-cn-shenzhen.aliyuncs.com/java/basic/LinkedHashSet.PNG" class="lazyload"></a></p><p>它继承了HashSet，又基于LinkedHashMap实现的。LinkedHashSet底层使用LinkedHashMap来保存所有元素。</p><p>它继承了HashSet，其所有的方法操作上跟HashSet相同，因此LinkedHashSet的实现上非常简单，只提供了四个构造方法，并通过传递一个标识参数，调用父类的构造器，底层构造一个LinkedHashMap来实现，在相关操作上与父类HashSet的操作相同，直接调用父类HashSet的方法即可。</p></body></html>]]></content>
    
    <summary type="html">
    
      
      
        &lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;h1 id=&quot;接口继承关系和实现&quot;&gt;&lt;a href=&quot;#接口继承关系和实现&quot; class=&quot;headerlink&quot; title=&quot;接口继承关系和实现&quot;&gt;&lt;/a&gt;接口继承关系和实现&lt;/h1&gt;&lt;p&gt;集合类存放在Java.util包中
      
    
    </summary>
    
    
      <category term="java基础" scheme="https://qihuang7.top/categories/java%E5%9F%BA%E7%A1%80/"/>
    
      <category term="集合" scheme="https://qihuang7.top/categories/java%E5%9F%BA%E7%A1%80/%E9%9B%86%E5%90%88/"/>
    
    
      <category term="java" scheme="https://qihuang7.top/tags/java/"/>
    
      <category term="基础" scheme="https://qihuang7.top/tags/%E5%9F%BA%E7%A1%80/"/>
    
      <category term="集合" scheme="https://qihuang7.top/tags/%E9%9B%86%E5%90%88/"/>
    
  </entry>
  
  <entry>
    <title>java多线程基础（八）：synchronized与锁</title>
    <link href="https://qihuang7.top/2020/04/07/%E5%A4%9A%E7%BA%BF%E7%A8%8B/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%9F%BA%E7%A1%80%EF%BC%88%E5%85%AB%EF%BC%89%EF%BC%9Asynchronized%E4%B8%8E%E9%94%81/"/>
    <id>https://qihuang7.top/2020/04/07/%E5%A4%9A%E7%BA%BF%E7%A8%8B/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%9F%BA%E7%A1%80%EF%BC%88%E5%85%AB%EF%BC%89%EF%BC%9Asynchronized%E4%B8%8E%E9%94%81/</id>
    <published>2020-04-07T14:18:26.000Z</published>
    <updated>2020-04-07T17:20:33.213Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><h1 id="Synchronized关键字"><a href="#Synchronized关键字" class="headerlink" title="Synchronized关键字"></a>Synchronized关键字</h1><p>Java多线程的锁都是基于对象的，类锁也是对象锁<br>我们通常使用synchronized关键字来给一段代码或一个方法上锁，它通常有以下三种形式：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 关键字在实例⽅法上，锁为当前实例</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">instanceLock</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="comment">// code</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 关键字在静态⽅法上，锁为当前Class对象</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">classLock</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="comment">// code</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 关键字在代码块上，锁为括号⾥⾯的对象</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">blockLock</span><span class="params">()</span> </span>{</span><br><span class="line">    Object o = <span class="keyword">new</span> Object();</span><br><span class="line">    <span class="keyword">synchronized</span> (o) {</span><br><span class="line">        <span class="comment">// code</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><h2 id="“临界区”的概念"><a href="#“临界区”的概念" class="headerlink" title="“临界区”的概念"></a>“临界区”的概念</h2><p><strong>所谓“临界区”，指的是某一块代码区域，它同一时刻只能由一个线程执行。</strong> 在上面的例子中，如果synchronized关键字在方法上，那临界区就是整个方法内部。而如果是使用synchronized代码块，那临界区就指的是代码块内部的区域。<br>下面着两个写法其实是等价的作用：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 关键字在实例⽅法上，锁为当前实例</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">instanceLock</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="comment">// code</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 关键字在代码块上，锁为括号⾥⾯的对象</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">blockLock</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="keyword">synchronized</span> (<span class="keyword">this</span>) {</span><br><span class="line">        <span class="comment">// code</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><p>下面这两个方法也是等价的</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 关键字在静态⽅法上，锁为当前Class对象</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">classLock</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="comment">// code</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 关键字在代码块上，锁为括号⾥⾯的对象</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">blockLock</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="keyword">synchronized</span> (<span class="keyword">this</span>.getClass()) {</span><br><span class="line">        <span class="comment">// code</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><h1 id="几种锁"><a href="#几种锁" class="headerlink" title="几种锁"></a>几种锁</h1><p>一个对象有四种锁状态，它们级别 <strong>由低到高</strong> 依次是：<br><strong>1. 无锁状态</strong><br><strong>2. 偏向锁状态</strong><br><strong>3. 轻量级锁状态</strong><br><strong>4. 重量级锁状态</strong>  </p><blockquote><p>几种锁都会随着竞争情况逐渐升级，锁的升级很容易发生，但是锁降级发生的条件会比较苛刻，锁降级发生在Stop The World期间，当JVM进入安全点的时候，会检查是否有闲置的锁，然后进行降级。</p></blockquote><h2 id="Java对象头"><a href="#Java对象头" class="headerlink" title="Java对象头"></a>Java对象头</h2><p>每个Java对象都有对象头。非数字类型会用2个字宽来存储对象头，数组则会用3个字宽来存储对象头。</p><blockquote><p>在32位处理器中，一个字宽是32位；64位虚拟机中一个字宽是64位</p></blockquote><p><strong>对象头的内容如下表：</strong></p><table><thead><tr><th>长度</th><th>内容</th><th>说明</th></tr></thead><tbody><tr><td>32/64bit</td><td>Mark Word</td><td>存储对象的hashCode或锁信息等</td></tr><tr><td>32/64bit</td><td>Class Metadata Address</td><td>存储到对象类型数据的指针</td></tr><tr><td>32/64bit</td><td>Array length</td><td>数组的长度（是数组的情况）</td></tr></tbody></table><p><strong>Mark Work 的格式：</strong></p><table><thead><tr><th>锁状态</th><th>29 bit 或 61 bit</th><th>1 bit 是否是偏向锁</th><th>2 bit 锁标志位</th></tr></thead><tbody><tr><td>无锁</td><td></td><td>0</td><td>01</td></tr><tr><td>偏向锁</td><td>线程ID</td><td>1</td><td>01</td></tr><tr><td>轻量级锁</td><td>指向栈中锁记录的指针</td><td>此时这一位不用于标识偏向锁</td><td>00</td></tr><tr><td>重量级锁</td><td>指向互斥量（重量级锁）的指针</td><td>此时这一位不用于标识偏向锁</td><td>10</td></tr><tr><td>GC标记</td><td></td><td>此时这一位不用标识偏向锁</td><td>11</td></tr></tbody></table><blockquote><p>当对象状态为偏向锁时，Mark Word 存储的是偏向的线程ID；当状态为轻量级锁时，Mark Word 存储的是指向线程栈中 Lock Record 的指针；当状态为重量级锁时，Mark Word 指向队中的monitor对象的指针</p></blockquote><h2 id="偏向锁"><a href="#偏向锁" class="headerlink" title="偏向锁"></a>偏向锁</h2><p>大多数情况下 <strong>锁不仅不存在多线程竞争，而且总是由同一线程多次获得</strong>，于是引入了偏向锁</p><p>偏向锁会偏向于第一个访问锁的线程，如果在接下来的运行过程中，该锁没有被其他的线程访问，则持有偏向锁的线程将永远不会触发同步。也就是说，<strong>偏向锁在资源无竞争情况下消除了同步语句，连CAS操作都不做了，提高了程序的运行性能。</strong></p><blockquote><p>也就是对锁置个变量，如果发现为true，代表资源无竞争，则无需再走各种加锁/解锁流程。如果为false，代表存在其他线程竞争资源，那么就会走后面的流程。</p></blockquote><h3 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h3><p>⼀个线程在第⼀次进⼊同步块时，会在对象头和栈帧中的锁记录⾥存储锁的偏向的线程ID。当下次该线程进⼊这个同步块时，会去检查锁的Mark Word⾥⾯是不是放的⾃⼰的线程ID。</p><p>如果是，表明该线程已经获得了锁，以后该线程在进⼊和退出同步块时不需要花费CAS操作来加锁和解锁 ；如果不是，就代表有另⼀个线程来竞争这个偏向锁。这个时候会尝试使⽤CAS来替换Mark Word⾥⾯的线程ID为新线程的ID，这个时候要分两种情况： </p><ul><li>成功，表示之前的线程不存在了， Mark Word ⾥⾯的线程ID为新线程的ID，锁不会升级，仍然为偏向锁;  </li><li>失败，表示之前的线程仍然存在，那么暂停之前的线程，设置偏向锁标识为0，并设置锁标志位为00，升级为轻量级锁，会按照轻量级锁的⽅式进⾏竞争锁。</li></ul><blockquote><p>CAS：Compare and Swap<br><strong>比较并设置</strong>。⽤于在硬件层⾯上提供原⼦性操作。在 Intel 处理器中，⽐较并交换通过指令cmpxchg实现。⽐较是否和给定的数值⼀致，如果⼀致则修改，不⼀致则不修改。</p></blockquote><p>线程竞争偏向锁的过程如下：</p><p><a href="http://concurrent.redspider.group/article/02/imgs/%E5%81%8F%E5%90%91%E9%94%812.jpg" data-fancybox="group" data-caption="偏向锁操作流程" class="fancybox"><img alt="偏向锁操作流程" title="偏向锁操作流程" data-src="http://concurrent.redspider.group/article/02/imgs/%E5%81%8F%E5%90%91%E9%94%812.jpg" class="lazyload"></a></p><p>图中涉及到了lock record指针指向当前堆栈中的最近一个lock record，是轻量级锁按照 <strong>先来先服务的模式</strong> 进行了轻量级锁的加锁。</p><h3 id="撤销偏向锁"><a href="#撤销偏向锁" class="headerlink" title="撤销偏向锁"></a>撤销偏向锁</h3><p>偏向锁使用了一种 <strong>等到竞争出现才释放锁的机制</strong>，所以当其他线程尝试竞争偏向锁时，持有偏向锁的线程才会释放锁。</p><p>偏向锁升级成轻量级锁时，会暂停拥有偏向锁的线程，重置偏向锁标识，这个过程看起来容易，实则开销还是很大的，大概的过程如下：</p><ol><li>在一个安全点（在这个时间点上没有字节码正在执行）停止拥有锁的线程。</li><li>遍历线程栈，如果存在线程记录的话，需要修复锁记录和Mark Word，使其变成无锁状态。</li><li>唤醒被停止的线程，将当前锁升级成轻量级锁。</li></ol><p>所以，如果应用程序里所有的锁通常处于竞争状态，那么偏向锁就会是一种累赘，对于这种情况，我们可以一开始就把偏向这个默认功能给关闭：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">xml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-XX:UseBiasedLocking=false</span><br></pre></td></tr></tbody></table></figure></div><p>下图总结了偏向锁的获得和撤销：</p><p><a href="http://concurrent.redspider.group/article/02/imgs/%E5%81%8F%E5%90%91%E9%94%81.png" data-fancybox="group" data-caption="偏向锁的获得和撤销流程" class="fancybox"><img alt="偏向锁的获得和撤销流程" title="偏向锁的获得和撤销流程" data-src="http://concurrent.redspider.group/article/02/imgs/%E5%81%8F%E5%90%91%E9%94%81.png" class="lazyload"></a></p><h2 id="轻量级锁"><a href="#轻量级锁" class="headerlink" title="轻量级锁"></a>轻量级锁</h2><p>每个线程在不同时段获取同一把锁，即不存在锁竞争的情况，也就没有线程阻塞。针对这种情况，<strong>JVM采用轻量级锁来避免线程的阻塞与唤醒。</strong></p><h3 id="轻量级锁的加锁"><a href="#轻量级锁的加锁" class="headerlink" title="轻量级锁的加锁"></a>轻量级锁的加锁</h3><p>JVM会为每个线程在当前线程的栈帧中创建用于<strong>存储锁记录的空间</strong>，我们称为Displaced Mark Word。<strong>如果一个线程获得锁的时候发现是轻量级锁，会把锁的Mark Word复制到自己的Displaced Mark Word里面。</strong></p><p>然后线程尝试用CAS将锁的Mark Word替换为指向锁记录的指针。如果成功，当前线程获得锁，如果失败，表示Mark Word已经被替换成了其他线程的锁记录，说明在与其它线程竞争锁，<strong>当前线程就尝试使用自旋来获取锁。</strong></p><blockquote><p>自旋：不断尝试去获取锁，一般用循环来实现。</p></blockquote><p>自旋是需要消耗CPU的，如果一直获取不到锁的话，那该线程就会一直处于自旋状态，白白浪费CPU资源。解决这个问题最简单的办法就是指定自旋的次数，例如让其循环10次，如果还没获取到锁就进入阻塞状态。</p><p>但是JDK采用了更聪明的方式——适应性自旋，简单来说就是线程如果自旋成功了，则下次自旋的次数会更多，如果自旋失败了，则自旋的次数就会减少。</p><p>自旋也不是一直进行下去的，如果自旋到一定程度（和JVM、操作系统相关），依然没有获取到锁，称为自旋失败，那么这个线程会阻塞。同时这个锁就会升级成重量级锁。</p><h3 id="轻量级锁的释放："><a href="#轻量级锁的释放：" class="headerlink" title="轻量级锁的释放："></a>轻量级锁的释放：</h3><p>在释放锁时，当前线程会使用CAS操作将Displaced Mark Word的内容复制回锁的Mark Word里面。如果没有发生竞争，那么这个复制的操作会成功。如果有其他线程因为自旋多次导致轻量级锁升级成了重量级锁，那么CAS操作会失败，此时会释放锁并唤醒被阻塞的线程。</p><p>下图说明加锁和释放锁的过程：</p><p><a href="http://concurrent.redspider.group/article/02/imgs/%E8%BD%BB%E9%87%8F%E7%BA%A7%E9%94%81%E6%B5%81%E7%A8%8B%E5%9B%BE.png" data-fancybox="group" data-caption="轻量级锁加锁和释放锁的过程" class="fancybox"><img alt="轻量级锁加锁和释放锁的过程" title="轻量级锁加锁和释放锁的过程" data-src="http://concurrent.redspider.group/article/02/imgs/%E8%BD%BB%E9%87%8F%E7%BA%A7%E9%94%81%E6%B5%81%E7%A8%8B%E5%9B%BE.png" class="lazyload"></a></p><h2 id="重量级锁"><a href="#重量级锁" class="headerlink" title="重量级锁"></a>重量级锁</h2><p>重量级锁依赖于操作系统的互斥量（mutex）实现的，而操作系统中线程间状态的转换需要相对比较长的时间，所以重量级锁效率很低，但被阻塞的线程不会消耗CPU。</p><p>前面说到，每一个对象都可以当做一个锁，当多个线程同时请求某个对象锁时，对象锁会设置几种状态用来区分请求的线程：</p><blockquote><p>Contention List：所有请求锁的线程将被首先放置到该竞争队列</p><p>Entry List：Contention List中那些有资格成为候选人的线程被移到Entry List  </p><p>Wait Set：那些调用wait方法被阻塞的线程被放置到Wait Set  </p><p>OnDeck：任何时刻最多只能有一个线程正在竞争锁，该线程称为OnDeck  </p><p>Owner：获得锁的线程称为Owner  </p><p>!Owner：释放锁的线程<br><a href="https://myblog-file.oss-cn-shenzhen.aliyuncs.com/java/basic/%E5%9B%BE%E7%89%871.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://myblog-file.oss-cn-shenzhen.aliyuncs.com/java/basic/%E5%9B%BE%E7%89%871.png" class="lazyload"></a></p></blockquote><p>当一个线程尝试获得锁时，如果该锁已经被占用，则会将该线程封装成一个ObjectWaiter对象插入到Contention List的队列的队首，然后调用park函数挂起当前线程。</p><p>当线程释放锁时，会从Contention List或EntryList中挑选一个线程唤醒，被选中的线程叫做Heir presumptive即假定继承人，假定继承人被唤醒后会尝试获得锁，但synchronized是非公平的，所以假定继承人不一定能获得锁。这是因为对于重量级锁，线程先自旋尝试获得锁，这样做的目的是为了减少执行操作系统同步操作带来的开销。如果自旋不成功再进入等待队列。这对那些已经在等待队列中的线程来说，稍微显得不公平，还有一个不公平的地方是自旋线程可能会抢占了Ready线程的锁。</p><p>线程获得锁后调用Object.wait方法，则会将线程加入到WaitSet中，当被Object.notify唤醒后，会将线程从WaitSet移动到Contention List或EntryList中去。需要注意的是，当调用一个锁对象的wait或notify方法时，<strong>如果当前锁的状态是偏向锁或轻量级锁则会先膨胀成重量级锁。</strong></p><h2 id="总结锁的升级流程"><a href="#总结锁的升级流程" class="headerlink" title="总结锁的升级流程"></a>总结锁的升级流程</h2><p>每一个线程在准备获取共享资源时：<br>第一步，检查Mark Word里面是不是放的自己的线程Id，如果是，表示当前线程是<strong>处于“偏向锁”</strong></p><p>第二步，如果Mark Word不是自己的线程Id，<strong>锁升级</strong>，这时候，用CAS来执行切换，新的线程根据Mark Word里面现有的线程Id，通知之前线程暂停，之前线程将Mark Word的内容置为空。</p><p>第三步，两个线程都把锁对象的HashCode复制到自己新建的用于存储锁的记录空间，接着就开始通过CAS操作，把锁对象的Mark Word的内容修改为自己新建的记录空间的地址的方式竞争Mark Word。</p><p>第四步，第三步中成功执行CAS的获得资源，失败的则进入自旋。</p><p>第五步，自旋的线程在自旋过程中，成功获得资源（即之前获得的资源的线程执行完成并释放了共享资源），则整个状态依然处于轻量级锁的状态，如果自旋失败</p><p>第六步，<strong>进入重量级锁的状态</strong>，这个时候，自旋的线程进行阻塞，等待之前的线程执行完成并唤醒自己。</p><h2 id="各种锁的优缺点对比"><a href="#各种锁的优缺点对比" class="headerlink" title="各种锁的优缺点对比"></a>各种锁的优缺点对比</h2><table><thead><tr><th>锁</th><th>优点</th><th>缺点</th><th>使用场景</th></tr></thead><tbody><tr><td>偏向锁</td><td>加锁和解锁不需要额外的消耗，和执行非同步方法比仅存在纳秒级的差距。</td><td>如果线程间存在锁竞争，会带来额外的锁撤销的消耗。</td><td>适用于只有一个线程访问同步块场景。</td></tr><tr><td>轻量级锁</td><td>竞争的线程不会阻塞，提高了程序的响应速度。</td><td>如果始终得不到锁竞争的线程使用自旋会消耗CPU。</td><td>追求响应时间。同步块执行速度非常快。</td></tr><tr><td>重量级锁</td><td>线程竞争不使用自旋，不会消耗CPU。</td><td>线程阻塞，响应时间缓慢。</td><td>追求吞吐量。同步块执行速度较长。</td></tr></tbody></table></body></html>]]></content>
    
    <summary type="html">
    
      
      
        &lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;h1 id=&quot;Synchronized关键字&quot;&gt;&lt;a href=&quot;#Synchronized关键字&quot; class=&quot;headerlink&quot; title=&quot;Synchronized关键字&quot;&gt;&lt;/a&gt;Synchronized关键字&lt;
      
    
    </summary>
    
    
      <category term="java基础" scheme="https://qihuang7.top/categories/java%E5%9F%BA%E7%A1%80/"/>
    
      <category term="多线程" scheme="https://qihuang7.top/categories/java%E5%9F%BA%E7%A1%80/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
    
      <category term="java" scheme="https://qihuang7.top/tags/java/"/>
    
      <category term="基础" scheme="https://qihuang7.top/tags/%E5%9F%BA%E7%A1%80/"/>
    
      <category term="锁" scheme="https://qihuang7.top/tags/%E9%94%81/"/>
    
      <category term="synchronized" scheme="https://qihuang7.top/tags/synchronized/"/>
    
  </entry>
  
  <entry>
    <title>每日一题：有效的括号</title>
    <link href="https://qihuang7.top/2020/04/07/leetcode/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98%EF%BC%9A%E6%9C%89%E6%95%88%E7%9A%84%E6%8B%AC%E5%8F%B7/"/>
    <id>https://qihuang7.top/2020/04/07/leetcode/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98%EF%BC%9A%E6%9C%89%E6%95%88%E7%9A%84%E6%8B%AC%E5%8F%B7/</id>
    <published>2020-04-07T13:37:29.000Z</published>
    <updated>2020-04-07T16:55:36.586Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><h1 id="20-有效的括号"><a href="#20-有效的括号" class="headerlink" title="20. 有效的括号"></a>20. 有效的括号</h1><p><strong>题目：</strong> 给定一个只包括 ‘(‘，’)’，’{‘，’}’，’[‘，’]’ 的字符串，判断字符串是否有效。</p><p>有效字符串需满足：</p><ol><li>左括号必须用相同类型的右括号闭合。</li><li>左括号必须以正确的顺序闭合。</li></ol><p>注意空字符串可被认为是有效字符串。</p><p>示例 1:</p><blockquote><p>输入: “()”<br>输出: true</p></blockquote><p>示例 2:</p><blockquote><p>输入: “()[]{}”<br>输出: true</p></blockquote><p>示例 3:</p><blockquote><p>输入: “(]”<br>输出: false</p></blockquote><p>示例 4:</p><blockquote><p>输入: “([)]”<br>输出: false</p></blockquote><p>示例 5:</p><blockquote><p>输入: “{[]}”<br>输出: true</p></blockquote><h2 id="官方题解：栈"><a href="#官方题解：栈" class="headerlink" title="官方题解：栈"></a>官方题解：栈</h2><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>关于有效括号表达式的一个有趣属性是有效表达式的子表达式也应该是有效表达式。（不是每个子表达式）例如</p><p><a href="https://pic.leetcode-cn.com/Figures/20/20-Valid-Parentheses-Recursive-Property.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://pic.leetcode-cn.com/Figures/20/20-Valid-Parentheses-Recursive-Property.png" class="lazyload"></a></p><p>此外，如果仔细查看上述结构，颜色标识的单元格将标记开闭的括号对。整个表达式是有效的，而它的子表达式本身也是有效的。这为问题提供了一种递归结构。例如，考虑上图中两个绿色括号内的表达式。开括号位于索引 1，相应闭括号位于索引 6。</p><h3 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h3><ol><li>初始化栈 S。</li><li>一次处理表达式的每个括号。</li><li>如果遇到开括号，我们只需将其推到栈上即可。这意味着我们将稍后处理它，让我们简单地转到前面的 子表达式。</li><li>如果我们遇到一个闭括号，那么我们检查栈顶的元素。如果栈顶的元素是一个 相同类型的 左括号，那么我们将它从栈中弹出并继续处理。否则，这意味着表达式无效。</li><li>如果到最后我们剩下的栈中仍然有元素，那么这意味着表达式无效。</li></ol><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        Solution solution = <span class="keyword">new</span> Solution();</span><br><span class="line">        <span class="keyword">boolean</span> valid = solution.isValid(<span class="string">"{{(())}[]}"</span>);</span><br><span class="line">        System.out.println(valid);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">private</span> HashMap<character, character> mappings;</character,></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Solution</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.mappings = <span class="keyword">new</span> HashMap<character, character>();</character,></span><br><span class="line">        <span class="keyword">this</span>.mappings.put(<span class="string">')'</span>, <span class="string">'('</span>);</span><br><span class="line">        <span class="keyword">this</span>.mappings.put(<span class="string">'}'</span>, <span class="string">'{'</span>);</span><br><span class="line">        <span class="keyword">this</span>.mappings.put(<span class="string">']'</span>, <span class="string">'['</span>);</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isValid</span><span class="params">(String s)</span> </span>{</span><br><span class="line">        Stack<character> stack = <span class="keyword">new</span> Stack<character>();</character></character></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i < s.length(); i++) {</span><br><span class="line">            <span class="keyword">char</span> c = s.charAt(i);</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.mappings.containsKey(c)) {</span><br><span class="line">                <span class="keyword">char</span> topElement = stack.empty() ? <span class="string">'#'</span> : stack.pop();</span><br><span class="line">                <span class="keyword">if</span> (topElement != <span class="keyword">this</span>.mappings.get(c)) {</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                }</span><br><span class="line">            } <span class="keyword">else</span> {</span><br><span class="line">                stack.push(c);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> stack.isEmpty();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><h3 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h3><ul><li>时间复杂度：O(n)，因为我们一次只遍历给定的字符串中的一个字符并在栈上进行 O(1) 的推入和弹出操作。</li><li>空间复杂度：O(n)，当我们将所有的开括号都推到栈上时以及在最糟糕的情况下，我们最终要把所有括号推到栈上。例如 ((((((((((。</li></ul></body></html>]]></content>
    
    <summary type="html">
    
      
      
        &lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;h1 id=&quot;20-有效的括号&quot;&gt;&lt;a href=&quot;#20-有效的括号&quot; class=&quot;headerlink&quot; title=&quot;20. 有效的括号&quot;&gt;&lt;/a&gt;20. 有效的括号&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;题目：&lt;/strong
      
    
    </summary>
    
    
      <category term="leetcode" scheme="https://qihuang7.top/categories/leetcode/"/>
    
    
      <category term="leetcode" scheme="https://qihuang7.top/tags/leetcode/"/>
    
      <category term="栈" scheme="https://qihuang7.top/tags/%E6%A0%88/"/>
    
  </entry>
  
  <entry>
    <title>java多线程基础（七）：volatile关键字</title>
    <link href="https://qihuang7.top/2020/04/07/%E5%A4%9A%E7%BA%BF%E7%A8%8B/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%9F%BA%E7%A1%80%EF%BC%88%E4%B8%83%EF%BC%89%EF%BC%9Avolatile%E5%85%B3%E9%94%AE%E5%AD%97/"/>
    <id>https://qihuang7.top/2020/04/07/%E5%A4%9A%E7%BA%BF%E7%A8%8B/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%9F%BA%E7%A1%80%EF%BC%88%E4%B8%83%EF%BC%89%EF%BC%9Avolatile%E5%85%B3%E9%94%AE%E5%AD%97/</id>
    <published>2020-04-06T16:00:26.000Z</published>
    <updated>2020-04-06T16:05:11.095Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><h1 id="第七章-volatile关键字"><a href="#第七章-volatile关键字" class="headerlink" title="第七章 volatile关键字"></a>第七章 volatile关键字</h1><h2 id="volatile的内存语义"><a href="#volatile的内存语义" class="headerlink" title="volatile的内存语义"></a>volatile的内存语义</h2><p>volatile关键字主要有以下两个功能：</p><ul><li>保证变量的 <strong>内存可见性</strong></li><li>禁止 volatile 变量与普通变量 <strong>重排序</strong></li></ul><h3 id="内存可见性"><a href="#内存可见性" class="headerlink" title="内存可见性"></a>内存可见性</h3><p>示例代码：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VolatileExample</span> </span>{</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">volatile</span> <span class="keyword">boolean</span> flag = <span class="keyword">false</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">writer</span><span class="params">()</span> </span>{</span><br><span class="line">        a = <span class="number">1</span>; <span class="comment">// step 1</span></span><br><span class="line">        flag = <span class="keyword">true</span>; <span class="comment">// step 2</span></span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">reader</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (flag) { <span class="comment">// step 3</span></span><br><span class="line">            System.out.println(a); <span class="comment">// step 4</span></span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><p>在这段代码里，我们使用 volatile 关键字修饰了一个 boolean 类型的变量 flag</p><blockquote><p><strong>所谓内存可见性，指的时当一个线程对 volatile 修饰的变量进行写操作（比如step2）时，JMM 会立即把该线程对应的本地内存中的共享变量的值刷新到主内存；当一个线程对 volatile 修饰的变量进行读操作（比如step3）时，JMM会立即把该线程对应的本地内存置为无效，从主内存中读取共享变量的值。</strong></p></blockquote><p>假设在时间线上，线程A先执行 writer 方法，线程B后执行 reader 方法。那么必然会有下图：<br><a href="https://myblog-file.oss-cn-shenzhen.aliyuncs.com/java/basic/volatile.PNG" data-fancybox="group" data-caption="程序执行步骤与主内存变化" class="fancybox"><img alt="程序执行步骤与主内存变化" title="程序执行步骤与主内存变化" data-src="https://myblog-file.oss-cn-shenzhen.aliyuncs.com/java/basic/volatile.PNG" class="lazyload"></a></p><p>如果 flag变量 没有用 volatile 修饰，在step2的变量就不会立即更新到主内存，线程B 也不会拿到最新的值，仍然使用B本地内存缓存的变量值 a = 0,flag = false.</p><h3 id="禁止重排序"><a href="#禁止重排序" class="headerlink" title="禁止重排序"></a>禁止重排序</h3><p><strong>在旧的java内存模型中，是允许 volatile变量 与普通变量重排序的。</strong> 上面的案例就可能会被重排序成下列时序来执行：  </p><ol><li>线程A写volatile变量，step2，设置flag 为true；  </li><li>线程B读同一个volatile，step3，读取到flag 为true； </li><li>线程B读普通变量，step4，读取到a = 0；  </li><li>线程A修改普通变量，step1，设置a = 1;</li></ol><p>可见，如果 volatile变量与普通变量发生了重排序，虽然 volatile变量能保证内存可见性，也可能导致普通变量读取错误。</p><p>为了提供一种比锁更轻量级的线程间的通信机制，JSR-133专家组决定增强 volatile的内存语义：<strong>严格限制编译器和处理器对volatile变量与普通变量的重排序。</strong></p><h3 id="内存屏障"><a href="#内存屏障" class="headerlink" title="内存屏障"></a>内存屏障</h3><h4 id="JVM是怎么限制处理器的重排序的呢？"><a href="#JVM是怎么限制处理器的重排序的呢？" class="headerlink" title="JVM是怎么限制处理器的重排序的呢？"></a>JVM是怎么限制处理器的重排序的呢？</h4><p>它是通过 <strong>内存屏障</strong> 来实现的</p><blockquote><p>硬件层面，内存屏障分两种：<strong>读屏障（Load Barrier）和写屏障（Store Barrier）</strong>。</p></blockquote><p><strong>内存屏障有两个作用：</strong>  </p><p><strong>1.阻止屏障两侧的指令重排序；</strong><br><strong>2.强制把写缓冲区/高速缓存中的脏数据等写回主内存，或者让缓存中相应的数据失效。</strong></p><p>编译器在生成字节码时，会在指令序列中插入内存屏障来禁止特定类型的处理器重排序。编译器选择了一个比较保守的<strong>JMM内存屏障插入策略：</strong></p><ul><li>在每个 volatile写操作 前 插入一个 StoreStore屏障；</li><li>在每个 volatile写操作 后 插入一个 StoreLoad屏障；</li><li>在每个 volatile读操作 后 插入一个 LoadLoad屏障；</li><li>在每个 volatile读操作 后 插入一个 LoadStore屏障。</li></ul><p>示意图：<br><a href="https://myblog-file.oss-cn-shenzhen.aliyuncs.com/java/basic/JMM%E5%86%85%E5%AD%98%E5%B1%8F%E9%9A%9C%E6%8F%92%E2%BC%8A%E7%AD%96%E7%95%A5.PNG" data-fancybox="group" data-caption="JMM内存屏障插入策略" class="fancybox"><img alt="JMM内存屏障插入策略" title="JMM内存屏障插入策略" data-src="https://myblog-file.oss-cn-shenzhen.aliyuncs.com/java/basic/JMM%E5%86%85%E5%AD%98%E5%B1%8F%E9%9A%9C%E6%8F%92%E2%BC%8A%E7%AD%96%E7%95%A5.PNG" class="lazyload"></a></p><p><strong>volatile与普通变量的重排序规则：</strong><br><strong>1. 如果第⼀个操作是volatile读，那⽆论第⼆个操作是什么，都不能重排序；</strong><br><strong>2. 如果第⼆个操作是volatile写，那⽆论第⼀个操作是什么，都不能重排序；</strong><br><strong>3. 如果第⼀个操作是volatile写，第⼆个操作是volatile读，那不能重排序。</strong>  </p><blockquote><p>在案例中step 1，是普通变量的写，step2是volatile变量的写，那符合第2个规则，这两个steps不能重排序。⽽step3是volatile变量读，step4是普通变量读，符合第1个规则，同样不能重排序。</p></blockquote><p>如果是第一个操作是普通变量读，第二个操作是volatile变量读，那是可以重排序的：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 声明变量</span></span><br><span class="line"><span class="keyword">int</span> a = <span class="number">0</span>; <span class="comment">// 声明普通变量</span></span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">boolean</span> flag = <span class="keyword">false</span>; <span class="comment">// 声明volatile变量</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 以下两个变量的读操作是可以重排序的</span></span><br><span class="line"><span class="keyword">int</span> i = a; <span class="comment">// 普通变量读</span></span><br><span class="line"><span class="keyword">boolean</span> j = flag; <span class="comment">// volatile变量读</span></span><br></pre></td></tr></tbody></table></figure></div><h2 id="volatile的用途"><a href="#volatile的用途" class="headerlink" title="volatile的用途"></a>volatile的用途</h2><p>在保存内存可见性这一点上，volatile有着与锁相同的内存语义，所以 <strong>可以作为一个“轻量级”的锁来使用</strong> 。但由于volatile仅仅保证对单个volatile变量的读/写具有原子性，而锁可以保证整个临界区代码的执行具有原子性。所以 <strong>在功能上，锁比volatile更强大； 在性能上，volatile更有优势</strong></p><h3 id="单例模式中volatile的应用"><a href="#单例模式中volatile的应用" class="headerlink" title="单例模式中volatile的应用"></a>单例模式中volatile的应用</h3><p><strong>“双重锁检查”</strong></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> Singleton instance; </span><br><span class="line">    <span class="comment">// 双重锁检验</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="keyword">null</span>) { <span class="comment">// 第7⾏</span></span><br><span class="line">            <span class="keyword">synchronized</span> (Singleton<span class="class">.<span class="keyword">class</span>) </span>{</span><br><span class="line">                <span class="keyword">if</span> (instance == <span class="keyword">null</span>) {</span><br><span class="line">                    instance = <span class="keyword">new</span> Singleton(); </span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    <span class="keyword">return</span> instance;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div></body></html>]]></content>
    
    <summary type="html">
    
      
      
        &lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;h1 id=&quot;第七章-volatile关键字&quot;&gt;&lt;a href=&quot;#第七章-volatile关键字&quot; class=&quot;headerlink&quot; title=&quot;第七章 volatile关键字&quot;&gt;&lt;/a&gt;第七章 volatile关键字&lt;
      
    
    </summary>
    
    
      <category term="java基础" scheme="https://qihuang7.top/categories/java%E5%9F%BA%E7%A1%80/"/>
    
      <category term="多线程" scheme="https://qihuang7.top/categories/java%E5%9F%BA%E7%A1%80/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
    
      <category term="java" scheme="https://qihuang7.top/tags/java/"/>
    
      <category term="基础" scheme="https://qihuang7.top/tags/%E5%9F%BA%E7%A1%80/"/>
    
      <category term="多线程" scheme="https://qihuang7.top/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
      <category term="volatile" scheme="https://qihuang7.top/tags/volatile/"/>
    
  </entry>
  
  <entry>
    <title>java多线程基础（六）：重排序与happens-before</title>
    <link href="https://qihuang7.top/2020/04/06/%E5%A4%9A%E7%BA%BF%E7%A8%8B/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%9F%BA%E7%A1%80%EF%BC%88%E5%85%AD%EF%BC%89%EF%BC%9A%E9%87%8D%E6%8E%92%E5%BA%8F%E4%B8%8Ehappens-before/"/>
    <id>https://qihuang7.top/2020/04/06/%E5%A4%9A%E7%BA%BF%E7%A8%8B/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%9F%BA%E7%A1%80%EF%BC%88%E5%85%AD%EF%BC%89%EF%BC%9A%E9%87%8D%E6%8E%92%E5%BA%8F%E4%B8%8Ehappens-before/</id>
    <published>2020-04-06T15:45:26.000Z</published>
    <updated>2020-04-06T16:01:17.512Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><h1 id="第六章-重排序与happens-before"><a href="#第六章-重排序与happens-before" class="headerlink" title="第六章 重排序与happens-before"></a>第六章 重排序与happens-before</h1><h2 id="什么是重排序？"><a href="#什么是重排序？" class="headerlink" title="什么是重排序？"></a>什么是重排序？</h2><p><strong>为优化程序性能，对原有的指令执行顺序进行优化重新排序。</strong> </p><blockquote><p>每一个指令都会包含多个步骤，每个步骤可能使用不同的硬件。因此 <strong>流水线技术</strong> 产生了，它的原理是 <strong>指令1还没有执行完，就可以开始执行指令2，而不用等到指令1执行结束之后再执行指令2，这样就大大提高了效率</strong></p></blockquote><p>流水线技术最害怕 <strong>中断</strong>，恢复中断的代价是比较大的，<strong>指令重排就是减少中断的一种技术。</strong></p><p>指令重排一般分为以下三种：</p><ul><li><strong>编译器优化重排</strong> </li><li><strong>指令并行重排</strong></li><li><strong>内存系统重排</strong></li></ul><h2 id="顺序一致性模型"><a href="#顺序一致性模型" class="headerlink" title="顺序一致性模型"></a>顺序一致性模型</h2><p>顺序一致性模型是一个 <strong>理论参考模型</strong> ，它为程序员提供了 <strong>极强的内存可见性保证。</strong></p><h3 id="内存可见性"><a href="#内存可见性" class="headerlink" title="内存可见性"></a>内存可见性</h3><p><strong>内存可见性，指的是线程之间的可见性，当一个线程修改了共享变量时，另一个线程可以读取到这个修改后的值。</strong></p><h3 id="数据竞争与顺序一致性"><a href="#数据竞争与顺序一致性" class="headerlink" title="数据竞争与顺序一致性"></a>数据竞争与顺序一致性</h3><p>当程序未正确同步的时候，就可能存在数据竞争，运行的结果往往充满了不确定性。</p><blockquote><p>数据竞争：在一个线程中写一个变量，另一个线程读同一个变量，并且写和读没有通过同步来排序。</p></blockquote><h3 id="顺序一致性模型有两大特性："><a href="#顺序一致性模型有两大特性：" class="headerlink" title="顺序一致性模型有两大特性："></a>顺序一致性模型有两大特性：</h3><ul><li>一个线程中的所有操作必须按照程序的顺序来执行</li><li>每个操作必须是原子性的，且立刻对所有线程可见</li></ul><p>假设有两个线程 A 和 B 并发执行，线程 A 有3个操作，它们在程序中的顺序是 A1->A2->A3 ，线程 B 也有3个操作，B1->B2->B3</p><p>假设 <strong>正确使用了同步</strong> ，A 线程的3个操作执行后释放锁，B线程获取同一个锁。那么在顺序一致性模型中的执行效果如下所示：</p><p><strong>A1–>A2–>A3–>B1–>B2–>B3</strong></p><p>假设 <strong>没有使用同步</strong> ，那么在顺序一致性模型中的执行效果如下所示：</p><p><strong>B1–>A1–>A2–>B2–>A3–>B3</strong></p><h2 id="happens-before规则"><a href="#happens-before规则" class="headerlink" title="happens-before规则"></a>happens-before规则</h2><p>只要程序员在写代码时遵循 happens-before 规则，JVM就能保证指令在多线程之间的顺序性符合程序员的预期</p><p><strong>天然的happens-before关系：</strong></p><ul><li><strong>程序顺序规则</strong>：⼀个线程中的每⼀个操作，happens-before于该线程中的任意后续操作</li><li><strong>监视器锁规则</strong>：对⼀个锁的解锁，happens-before于随后对这个锁的加锁</li><li><strong>volatile变量规则</strong>：对⼀个volatile域的写，happens-before于任意后续对这个 volatile 域的读。</li><li><strong>传递性</strong>：如果A happens-before B，且B happens-before C，那么A happensbefore C。</li><li><strong>start规则</strong>：如果线程A执⾏操作ThreadB.start()启动线程B，那么A线程的 ThreadB.start（）操作happens-before于线程B中的任意操作</li><li><strong>join规则</strong>：如果线程A执⾏操作ThreadB.join（）并成功返回，那么线程B中的任意操作 happens-before 于线程A从ThreadB.join()操作成功返回。</li></ul></body></html>]]></content>
    
    <summary type="html">
    
      
      
        &lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;h1 id=&quot;第六章-重排序与happens-before&quot;&gt;&lt;a href=&quot;#第六章-重排序与happens-before&quot; class=&quot;headerlink&quot; title=&quot;第六章 重排序与happens-before&quot;
      
    
    </summary>
    
    
      <category term="java基础" scheme="https://qihuang7.top/categories/java%E5%9F%BA%E7%A1%80/"/>
    
      <category term="多线程" scheme="https://qihuang7.top/categories/java%E5%9F%BA%E7%A1%80/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
    
      <category term="java" scheme="https://qihuang7.top/tags/java/"/>
    
      <category term="基础" scheme="https://qihuang7.top/tags/%E5%9F%BA%E7%A1%80/"/>
    
      <category term="多线程" scheme="https://qihuang7.top/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>每日一题：合并排序的数组</title>
    <link href="https://qihuang7.top/2020/04/06/leetcode/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98%EF%BC%9A%E5%90%88%E5%B9%B6%E6%8E%92%E5%BA%8F%E7%9A%84%E6%95%B0%E7%BB%84/"/>
    <id>https://qihuang7.top/2020/04/06/leetcode/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98%EF%BC%9A%E5%90%88%E5%B9%B6%E6%8E%92%E5%BA%8F%E7%9A%84%E6%95%B0%E7%BB%84/</id>
    <published>2020-04-05T16:43:29.000Z</published>
    <updated>2020-04-05T16:44:06.528Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><h1 id="面试题10-01-合并排序的数组"><a href="#面试题10-01-合并排序的数组" class="headerlink" title="面试题10.01 合并排序的数组"></a>面试题10.01 合并排序的数组</h1><p>给定两个排序后的数组 A 和 B，其中 A 的末端有足够的缓冲空间容纳 B。 编写一个方法，将 B 合并入 A 并排序。</p><p>初始化 A 和 B 的元素数量分别为 m 和 n。</p><p><strong>示例:</strong></p><blockquote><p>输入:<br>A = [1,2,3,0,0,0], m = 3<br>B = [2,5,6],       n = 3<br>输出: [1,2,2,3,5,6]</p></blockquote><p>说明:</p><blockquote><p>A.length == n + m</p></blockquote><p><strong>暴力解法：</strong></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span>[] A, <span class="keyword">int</span> m, <span class="keyword">int</span>[] B, <span class="keyword">int</span> n)</span> </span>{</span><br><span class="line">        <span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = m;i<m+n;i++){< span><br><span class="line">            A[i] = B[j++];</span><br><span class="line">        }</span><br><span class="line">        Arrays.sort(A);</span><br><span class="line">    }</span><br><span class="line">}</span><br></m+n;i++){<></span></pre></td></tr></tbody></table></figure></div></body></html>]]></content>
    
    <summary type="html">
    
      
      
        &lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;h1 id=&quot;面试题10-01-合并排序的数组&quot;&gt;&lt;a href=&quot;#面试题10-01-合并排序的数组&quot; class=&quot;headerlink&quot; title=&quot;面试题10.01 合并排序的数组&quot;&gt;&lt;/a&gt;面试题10.01 合并排序
      
    
    </summary>
    
    
      <category term="leetcode" scheme="https://qihuang7.top/categories/leetcode/"/>
    
    
      <category term="leetcode" scheme="https://qihuang7.top/tags/leetcode/"/>
    
      <category term="数组" scheme="https://qihuang7.top/tags/%E6%95%B0%E7%BB%84/"/>
    
      <category term="排序" scheme="https://qihuang7.top/tags/%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>java多线程基础（五）：线程间的通信</title>
    <link href="https://qihuang7.top/2020/04/05/%E5%A4%9A%E7%BA%BF%E7%A8%8B/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%9F%BA%E7%A1%80%EF%BC%88%E4%BA%94%EF%BC%89%EF%BC%9A%E7%BA%BF%E7%A8%8B%E9%97%B4%E7%9A%84%E9%80%9A%E4%BF%A1/"/>
    <id>https://qihuang7.top/2020/04/05/%E5%A4%9A%E7%BA%BF%E7%A8%8B/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%9F%BA%E7%A1%80%EF%BC%88%E4%BA%94%EF%BC%89%EF%BC%9A%E7%BA%BF%E7%A8%8B%E9%97%B4%E7%9A%84%E9%80%9A%E4%BF%A1/</id>
    <published>2020-04-05T12:54:26.000Z</published>
    <updated>2020-04-05T12:54:38.791Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><h1 id="第五章-Java线程间的通信"><a href="#第五章-Java线程间的通信" class="headerlink" title="第五章 Java线程间的通信"></a>第五章 Java线程间的通信</h1><h2 id="锁与同步"><a href="#锁与同步" class="headerlink" title="锁与同步"></a>锁与同步</h2><p>锁的概念都是 <strong>基于对象</strong> 的，所以又称它为“对象锁”。</p><p><strong>一个锁同一时间只能被一个线程持有。</strong> </p><p><strong>线程同步是线程之间按照一定的顺序执行</strong></p><blockquote><p>假如我们现在有2位正在抄暑假作业答案的同学：线程A和线程B。当他们正在抄的时候，⽼师突然来修改了⼀些答案，可能A和B最后写出的暑假作业就不⼀样。我们为了A,B能写出2本相同的暑假作业，我们就需要让⽼师先修改答案，然后A，B同学再抄。或者A，B同学先抄完，⽼师再修改答案。这就是线程A，线程B的线程同步。</p></blockquote><p>首先看一个无锁的程序：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NoneLock</span> </span>{</span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadA</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>{</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>{</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i < <span class="number">100</span>; i++) {</span><br><span class="line">                System.out.println(<span class="string">"Thread A "</span> + i);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadB</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>{</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>{</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i < <span class="number">100</span>; i++) {</span><br><span class="line">                System.out.println(<span class="string">"Thread B "</span> + i);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> ThreadA()).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> ThreadB()).start();</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="comment">/*执行结果：线程 A 和线程 B 各⾃独⽴⼯作，输出⾃⼰的打印值。</span></span><br><span class="line"><span class="comment">    ....</span></span><br><span class="line"><span class="comment">    Thread A 48</span></span><br><span class="line"><span class="comment">    Thread A 49</span></span><br><span class="line"><span class="comment">    Thread B 0</span></span><br><span class="line"><span class="comment">    Thread A 50</span></span><br><span class="line"><span class="comment">    Thread B 1</span></span><br><span class="line"><span class="comment">    Thread A 51</span></span><br><span class="line"><span class="comment">    Thread A 52</span></span><br><span class="line"><span class="comment">    ....</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></tbody></table></figure></div><p>如果需要 <strong>A先执行完之后再由B去执行</strong> 该怎么做？<br>最简单的⽅式就是使⽤⼀个“对象锁”：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ObjectLock</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Object lock = <span class="keyword">new</span> Object();</span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadA</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>{</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>{</span><br><span class="line">            <span class="keyword">synchronized</span> (lock) {</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i < <span class="number">100</span>; i++) {</span><br><span class="line">                    System.out.println(<span class="string">"Thread A "</span> + i);</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadB</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>{</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>{</span><br><span class="line">            <span class="keyword">synchronized</span> (lock) {</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i < <span class="number">100</span>; i++) {</span><br><span class="line">                    System.out.println(<span class="string">"Thread B "</span> + i);</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>{</span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> ThreadA()).start();</span><br><span class="line">        Thread.sleep(<span class="number">10</span>);</span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> ThreadB()).start();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><p>线程B 就会等线程A 执行完成后释放 lock ,线程B 才能获得锁 lock 。</p><blockquote><p>这⾥在主线程⾥使⽤ sleep⽅法 睡眠了10毫秒，是为了防⽌线程B先得到锁。 因为如果同时 start，线程 A 和线程 B 都是出于就绪状态，操作系统可能会先让 B 运行。这样就会先输出 B 的内容，然后 B 执行完成之后⾃动释放锁，线程 A 再执行。</p></blockquote><h2 id="等待-通知机制"><a href="#等待-通知机制" class="headerlink" title="等待/通知机制"></a>等待/通知机制</h2><p>多线程的等待/通知机制是基于 Object 类的 wait() 方法和 notify() ,notifyAll() 方法来实现的</p><blockquote><p>notify()方法会随机叫醒一个正在等待的线程  ，notifyAll() 会叫醒所有正在等待的线程。</p></blockquote><p>假如 线程A 现在持有一个 锁lock 并开始执行，它可以使用 lock.wait() 让自己进入等待状态，lock锁 被释放。这时，线程B 获得了 lock锁 并开始执行，在某个时刻使用 lock.notify()，通知等待状态的 A，但是 线程B 并没有释放锁，除非 B 使用 lock.wait() 或者B 执行结束自行释放锁，A 才能得到 lock锁</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WaitAndNotify</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Object lock = <span class="keyword">new</span> Object();</span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadA</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>{</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>{</span><br><span class="line">            <span class="keyword">synchronized</span> (lock) {</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i < <span class="number">5</span>; i++) {</span><br><span class="line">                    <span class="keyword">try</span> {</span><br><span class="line">                        System.out.println(<span class="string">"ThreadA: "</span> + i);</span><br><span class="line">                        lock.notify();</span><br><span class="line">                        lock.wait();</span><br><span class="line">                    } <span class="keyword">catch</span> (InterruptedException e) {</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    }</span><br><span class="line">                }</span><br><span class="line">                lock.notify();</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadB</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>{</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>{</span><br><span class="line">            <span class="keyword">synchronized</span> (lock) {</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i < <span class="number">5</span>; i++) {</span><br><span class="line">                    <span class="keyword">try</span> {</span><br><span class="line">                        System.out.println(<span class="string">"ThreadB: "</span> + i);</span><br><span class="line">                        lock.notify();</span><br><span class="line">                        lock.wait();</span><br><span class="line">                    } <span class="keyword">catch</span> (InterruptedException e) {</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    }</span><br><span class="line">                }</span><br><span class="line">                lock.notify();</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>{</span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> ThreadA()).start();</span><br><span class="line">        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> ThreadB()).start();</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="comment">/* 输出：</span></span><br><span class="line"><span class="comment">    ThreadA: 0</span></span><br><span class="line"><span class="comment">    ThreadB: 0</span></span><br><span class="line"><span class="comment">    ThreadA: 1</span></span><br><span class="line"><span class="comment">    ThreadB: 1</span></span><br><span class="line"><span class="comment">    ThreadA: 2</span></span><br><span class="line"><span class="comment">    ThreadB: 2</span></span><br><span class="line"><span class="comment">    ThreadA: 3</span></span><br><span class="line"><span class="comment">    ThreadB: 3</span></span><br><span class="line"><span class="comment">    ThreadA: 4</span></span><br><span class="line"><span class="comment">    ThreadB: 4</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></tbody></table></figure></div><p>线程A 和线程B 首先打印出自己需要的东西，然后使用 notify() 方法叫醒另一个正在等待的线程，然后自己使用 wait() 方法陷入等待并释放lock锁。</p><blockquote><p><strong>等待/通知机制使用的是使用同⼀个对象</strong></p></blockquote><h2 id="信号量"><a href="#信号量" class="headerlink" title="信号量"></a>信号量</h2><p>基于 volatile 关键字的⾃⼰实现的信号量通信。</p><blockquote><p>volitile关键字能够 <strong>保证内存的可⻅性</strong>，如果⽤volitile关键字声明了⼀个变量，在⼀个线程⾥⾯改变了这个变量的值，那其它线程是 <strong>⽴⻢可⻅更改后的值</strong> 的。</p></blockquote><p>需求：让 线程A 输出0，然后 线程B 输出1，再然后 线程A 输出2…以此类推。</p><p>代码：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Signal</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> <span class="keyword">int</span> signal = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadA</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>{</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>{</span><br><span class="line">            <span class="keyword">while</span> (signal < <span class="number">5</span>) {</span><br><span class="line">                <span class="keyword">if</span> (signal % <span class="number">2</span> == <span class="number">0</span>) {</span><br><span class="line">                    System.out.println(<span class="string">"threadA: "</span> + signal);</span><br><span class="line">                    <span class="keyword">synchronized</span> (<span class="keyword">this</span>) {</span><br><span class="line">                        signal++;</span><br><span class="line">                    }</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadB</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>{</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>{</span><br><span class="line">            <span class="keyword">while</span> (signal < <span class="number">5</span>) {</span><br><span class="line">                <span class="keyword">if</span> (signal % <span class="number">2</span> == <span class="number">1</span>) {</span><br><span class="line">                    System.out.println(<span class="string">"threadB: "</span> + signal);</span><br><span class="line">                    <span class="keyword">synchronized</span> (<span class="keyword">this</span>) {</span><br><span class="line">                        signal = signal + <span class="number">1</span>;</span><br><span class="line">                    }</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>{</span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> ThreadA()).start();</span><br><span class="line">        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> ThreadB()).start();</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="comment">/* 输出：</span></span><br><span class="line"><span class="comment">    threadA: 0</span></span><br><span class="line"><span class="comment">    threadB: 1</span></span><br><span class="line"><span class="comment">    threadA: 2</span></span><br><span class="line"><span class="comment">    threadB: 3</span></span><br><span class="line"><span class="comment">    threadA: 4</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></tbody></table></figure></div><h2 id="管道"><a href="#管道" class="headerlink" title="管道"></a>管道</h2><p>管道是基于“管道流”的通信方式。JDK提供了 Pipedwriter、 PipedReader、 PipedOutputStream、 PipedInputStream。其中，前面两个是基于字符的，后面两个是基于字节流的。</p><p>示例代码：基于字符的</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Pipe</span> </span>{</span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ReaderThread</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>{</span><br><span class="line">        <span class="keyword">private</span> PipedReader reader;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">ReaderThread</span><span class="params">(PipedReader reader)</span> </span>{</span><br><span class="line">            <span class="keyword">this</span>.reader = reader;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>{</span><br><span class="line">            System.out.println(<span class="string">"this is reader"</span>);</span><br><span class="line">            <span class="keyword">int</span> receive = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">try</span> {</span><br><span class="line">                <span class="keyword">while</span> ((receive = reader.read()) != -<span class="number">1</span>) {</span><br><span class="line">                    System.out.print((<span class="keyword">char</span>) receive);</span><br><span class="line">                }</span><br><span class="line">            } <span class="keyword">catch</span> (IOException e) {</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">WriterThread</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>{</span><br><span class="line">        <span class="keyword">private</span> PipedWriter writer;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">WriterThread</span><span class="params">(PipedWriter writer)</span> </span>{</span><br><span class="line">            <span class="keyword">this</span>.writer = writer;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>{</span><br><span class="line">            System.out.println(<span class="string">"this is writer"</span>);</span><br><span class="line">            <span class="keyword">int</span> receive = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">try</span> {</span><br><span class="line">                writer.write(<span class="string">"test"</span>);</span><br><span class="line">            } <span class="keyword">catch</span> (IOException e) {</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            } <span class="keyword">finally</span> {</span><br><span class="line">                <span class="keyword">try</span> {</span><br><span class="line">                    writer.close();</span><br><span class="line">                } <span class="keyword">catch</span> (IOException e) {</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, InterruptedException </span>{</span><br><span class="line">        PipedWriter writer = <span class="keyword">new</span> PipedWriter();</span><br><span class="line">        PipedReader reader = <span class="keyword">new</span> PipedReader();</span><br><span class="line">        writer.connect(reader); <span class="comment">// 这⾥注意⼀定要连接，才能通信</span></span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> ReaderThread(reader)).start();</span><br><span class="line">        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> WriterThread(writer)).start();</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="comment">/* 输出：</span></span><br><span class="line"><span class="comment">        this is reader</span></span><br><span class="line"><span class="comment">        this is writer</span></span><br><span class="line"><span class="comment">        test</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></tbody></table></figure></div><p>执行流程：</p><ol><li>线程ReaderThread开始执行， </li><li>线程ReaderThread使用管道reader.read()进⼊“阻塞”， </li><li>线程WriterThread开始执行， </li><li>线程WriterThread⽤writer.write(“test”)往管道写⼊字符串， </li><li>线程WriterThread使⽤writer.close()结束管道写⼊，并执行完毕， </li><li>线程ReaderThread接受到管道输出的字符串并打印， </li><li>线程ReaderThread执行完毕。</li></ol><blockquote><p>管道通信的应用场景：多半与I/O流相关。当我们一个线程需要另一个线程发送一个信息（比如字符串）或者文件等等时，就需要使用管道通信了。</p></blockquote><h2 id="其他通信"><a href="#其他通信" class="headerlink" title="其他通信"></a>其他通信</h2><ul><li><strong>join方法：</strong> 如果主线程想等待子线程执行完毕后 <strong>获得子线程中处理完的某个数据</strong>，就要用到 join方法 了</li><li><strong>sleep方法：sleep方法时不会释放当前的锁，容易死锁，而wait方法会。sleep方法必须指定时间。wait方法必须放在同步块或同步方法中,而sleep可以在任意位置。</strong></li><li>ThreadLocal类：它为每个线程都创建⼀个副本，每个线程可以访问⾃⼰内部的副本变量。</li><li>InheritableThreadLocal：它不仅仅是当前线程可以存取副本值，⽽且它的⼦线程也可以存取这个副本值。</li></ul></body></html>]]></content>
    
    <summary type="html">
    
      
      
        &lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;h1 id=&quot;第五章-Java线程间的通信&quot;&gt;&lt;a href=&quot;#第五章-Java线程间的通信&quot; class=&quot;headerlink&quot; title=&quot;第五章 Java线程间的通信&quot;&gt;&lt;/a&gt;第五章 Java线程间的通信&lt;/h1&gt;
      
    
    </summary>
    
    
      <category term="java基础" scheme="https://qihuang7.top/categories/java%E5%9F%BA%E7%A1%80/"/>
    
      <category term="多线程" scheme="https://qihuang7.top/categories/java%E5%9F%BA%E7%A1%80/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
    
      <category term="java" scheme="https://qihuang7.top/tags/java/"/>
    
      <category term="基础" scheme="https://qihuang7.top/tags/%E5%9F%BA%E7%A1%80/"/>
    
      <category term="多线程" scheme="https://qihuang7.top/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
      <category term="通信" scheme="https://qihuang7.top/tags/%E9%80%9A%E4%BF%A1/"/>
    
  </entry>
  
  <entry>
    <title>Spring基础（三）：IOC与AOP基于注解方式</title>
    <link href="https://qihuang7.top/2020/04/05/%E6%A1%86%E6%9E%B6/Spring%E5%9F%BA%E7%A1%80%EF%BC%88%E4%B8%89%EF%BC%89%EF%BC%9AIOC%E4%B8%8EAOP%E5%9F%BA%E4%BA%8E%E6%B3%A8%E8%A7%A3%E6%96%B9%E5%BC%8F/"/>
    <id>https://qihuang7.top/2020/04/05/%E6%A1%86%E6%9E%B6/Spring%E5%9F%BA%E7%A1%80%EF%BC%88%E4%B8%89%EF%BC%89%EF%BC%9AIOC%E4%B8%8EAOP%E5%9F%BA%E4%BA%8E%E6%B3%A8%E8%A7%A3%E6%96%B9%E5%BC%8F/</id>
    <published>2020-04-05T09:10:39.000Z</published>
    <updated>2020-04-05T09:11:56.263Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><h1 id="IOC与AOP基于注解"><a href="#IOC与AOP基于注解" class="headerlink" title="IOC与AOP基于注解"></a>IOC与AOP基于注解</h1><p>首先修改配置文件applicationContext.xml，表示告诉Spring要使用注解的方式进行配置<br><strong>一般情况两个配置不一起使用。</strong></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">xml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><!-- 扫描含有注解（@Component 等）类，注入注解自动生效 --></span></span><br><span class="line"><span class="tag"><<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">" "</span>></span></span><br><span class="line"><span class="comment"><!--只在xml和注解（注入）混合使用时，使注入注解生效。--></span></span><br><span class="line"><span class="tag"><<span class="name">context:annotation-config</span>></span></span><br></pre></td></tr></tbody></table></figure></div><h2 id="IOC注解"><a href="#IOC注解" class="headerlink" title="IOC注解"></a>IOC注解</h2><ol><li>@Component：组件，用于实现ioc控制反转,属性value用于实现对象id定义</li><li>@Scope：作用域，用于实现单例，多例，request，session等的配置</li><li><strong>@Controller：</strong> 专门用于controller层的注解</li><li><strong>@Service：</strong> 专门用于service层的注解</li><li><strong>@Repository：</strong> 专门用于DAO持久层的注解</li><li>@Resouce：注解会转而查找和属性类型相匹配Bean组件并注入。</li><li><strong>@Autowired：</strong> 自动注入</li></ol><h2 id="AOP注解"><a href="#AOP注解" class="headerlink" title="AOP注解"></a>AOP注解</h2><p>首先要在配置文件中开启对aop注解的支持</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">xml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><!-- 开启 spring 对注解 AOP 的支持 --></span> </span><br><span class="line"><span class="tag"><<span class="name">aop:aspectj-autoproxy</span>/></span></span><br></pre></td></tr></tbody></table></figure></div><ol><li>@Aaspet：表示当前类是一个切面类</li><li>@AfterReturning：后置通知，属性value用于指定切入点表达式</li><li>@AfterThrowing：异常通知</li><li>@After：最终通知</li><li>@Around：环绕通知<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment">* 环绕通知 </span></span><br><span class="line"><span class="comment">*/</span> </span><br><span class="line"><span class="meta">@Around</span>(<span class="string">"execution(* com.dustdawn.service.impl.*.*(..))"</span>) </span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">transactionAround</span><span class="params">(ProceedingJoinPoint pjp)</span> </span>{ </span><br><span class="line">    <span class="comment">//定义返回值 </span></span><br><span class="line">    Object rtValue = <span class="keyword">null</span>; </span><br><span class="line">    <span class="keyword">try</span> { </span><br><span class="line">        <span class="comment">//获取方法执行所需的参数 </span></span><br><span class="line">        Object[] args = pjp.getArgs(); </span><br><span class="line">        <span class="comment">//前置通知：开启事务 </span></span><br><span class="line">        beginTransaction(); </span><br><span class="line">        <span class="comment">//执行方法 </span></span><br><span class="line">        rtValue = pjp.proceed(args); </span><br><span class="line">        <span class="comment">//后置通知：提交事务 </span></span><br><span class="line">        commit(); </span><br><span class="line">    }<span class="keyword">catch</span>(Throwable e) { </span><br><span class="line">        <span class="comment">//异常通知：回滚事务 </span></span><br><span class="line">        rollback(); </span><br><span class="line">        e.printStackTrace(); </span><br><span class="line">    }<span class="keyword">finally</span> { </span><br><span class="line">        <span class="comment">//最终通知：释放资源 </span></span><br><span class="line">        release(); </span><br><span class="line">    } </span><br><span class="line">    <span class="keyword">return</span> rtValue; </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div></li><li>@Pointcut：用于指定切入点表达式，使用方式：<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Pointcut</span>(<span class="string">"execution(* com.xxx.service.impl.*.*(..))"</span>) </span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">pt1</span><span class="params">()</span> </span>{} </span><br><span class="line"></span><br><span class="line"><span class="meta">@Around</span>(<span class="string">"pt1()"</span>)   <span class="comment">//注意：千万别忘了写括号 </span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">transactionAround</span><span class="params">(ProceedingJoinPoint pjp)</span> </span>{ </span><br><span class="line">    ...</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div></li></ol></body></html>]]></content>
    
    <summary type="html">
    
      
      
        &lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;h1 id=&quot;IOC与AOP基于注解&quot;&gt;&lt;a href=&quot;#IOC与AOP基于注解&quot; class=&quot;headerlink&quot; title=&quot;IOC与AOP基于注解&quot;&gt;&lt;/a&gt;IOC与AOP基于注解&lt;/h1&gt;&lt;p&gt;首先修改配置文件a
      
    
    </summary>
    
    
      <category term="框架" scheme="https://qihuang7.top/categories/%E6%A1%86%E6%9E%B6/"/>
    
      <category term="spring" scheme="https://qihuang7.top/categories/%E6%A1%86%E6%9E%B6/spring/"/>
    
    
      <category term="基础" scheme="https://qihuang7.top/tags/%E5%9F%BA%E7%A1%80/"/>
    
      <category term="SSM" scheme="https://qihuang7.top/tags/SSM/"/>
    
      <category term="spring" scheme="https://qihuang7.top/tags/spring/"/>
    
  </entry>
  
  <entry>
    <title>每日一题：数组中重复的数字</title>
    <link href="https://qihuang7.top/2020/04/04/leetcode/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98%EF%BC%9A%E6%95%B0%E7%BB%84%E4%B8%AD%E9%87%8D%E5%A4%8D%E7%9A%84%E6%95%B0%E5%AD%97/"/>
    <id>https://qihuang7.top/2020/04/04/leetcode/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98%EF%BC%9A%E6%95%B0%E7%BB%84%E4%B8%AD%E9%87%8D%E5%A4%8D%E7%9A%84%E6%95%B0%E5%AD%97/</id>
    <published>2020-04-04T15:30:29.000Z</published>
    <updated>2020-04-04T15:30:33.300Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><h1 id="面试题03：数组中重复的数字"><a href="#面试题03：数组中重复的数字" class="headerlink" title="面试题03：数组中重复的数字"></a>面试题03：数组中重复的数字</h1><p>找出数组中重复的数字。</p><p>在一个长度为 n 的数组 nums 里的所有数字都在 0～n-1 的范围内。数组中某些数字是重复的，但不知道有几个数字重复了，也不知道每个数字重复了几次。请找出数组中任意一个重复的数字。</p><p><strong>示例 1：</strong></p><blockquote><p>输入：[2, 3, 1, 0, 2, 5, 3]<br>输出：2 或 3 </p></blockquote><p><strong>限制：</strong></p><blockquote><p>2 <= n <= 100000</p></blockquote><p><strong>解题思路（作者：smallpineapp1e）</strong></p><p>巧妙利用数组下标来匹配对应的元素，从前往后遍历数组，每个元素都要求下标与元素的值一一对应，如果在调换位置的过程中发现该位置的元素与别的位置的元素是相同的，那么就说明该数字重复，直接返回该数字</p><p><a href="https://pic.leetcode-cn.com/811320fa207519efeac59b157842938b61e4ec059ab9bc0ffa392babbd42da97-ezgif.com-resize.gif" data-fancybox="group" data-caption="数组与下标的完美结合" class="fancybox"><img alt="数组与下标的完美结合" title="数组与下标的完美结合" data-src="https://pic.leetcode-cn.com/811320fa207519efeac59b157842938b61e4ec059ab9bc0ffa392babbd42da97-ezgif.com-resize.gif" class="lazyload"></a></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">findRepeatNumber</span><span class="params">(<span class="keyword">int</span>[] arrs)</span> </span>{</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i < arr.length; i++){</span><br><span class="line">            <span class="comment">//将数字与下标对应起来</span></span><br><span class="line">            <span class="keyword">while</span> (arr[i] != i){</span><br><span class="line">                <span class="keyword">int</span> temp = arr[i];</span><br><span class="line">                <span class="comment">//如果准备移动的数字已经等于对应位置上的数字则说明数字重复</span></span><br><span class="line">                <span class="keyword">if</span>(temp == arr[temp]) <span class="keyword">return</span> temp;</span><br><span class="line">                arr[i] = arr[temp];</span><br><span class="line">                arr[temp] = temp;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> Integer.MAX_VALUE;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><p><strong>时间复杂度：O(n)，空间复杂度：O(1)</strong></p></body></html>]]></content>
    
    <summary type="html">
    
      
      
        &lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;h1 id=&quot;面试题03：数组中重复的数字&quot;&gt;&lt;a href=&quot;#面试题03：数组中重复的数字&quot; class=&quot;headerlink&quot; title=&quot;面试题03：数组中重复的数字&quot;&gt;&lt;/a&gt;面试题03：数组中重复的数字&lt;/h1&gt;
      
    
    </summary>
    
    
      <category term="leetcode" scheme="https://qihuang7.top/categories/leetcode/"/>
    
    
      <category term="leetcode" scheme="https://qihuang7.top/tags/leetcode/"/>
    
      <category term="数组" scheme="https://qihuang7.top/tags/%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>Spring基础（二）：AOP面向切面编程</title>
    <link href="https://qihuang7.top/2020/04/04/%E6%A1%86%E6%9E%B6/Spring%E5%9F%BA%E7%A1%80%EF%BC%88%E4%BA%8C%EF%BC%89%EF%BC%9AAOP%E9%9D%A2%E5%90%91%E5%88%87%E9%9D%A2%E7%BC%96%E7%A8%8B/"/>
    <id>https://qihuang7.top/2020/04/04/%E6%A1%86%E6%9E%B6/Spring%E5%9F%BA%E7%A1%80%EF%BC%88%E4%BA%8C%EF%BC%89%EF%BC%9AAOP%E9%9D%A2%E5%90%91%E5%88%87%E9%9D%A2%E7%BC%96%E7%A8%8B/</id>
    <published>2020-04-04T14:26:39.000Z</published>
    <updated>2020-04-04T16:50:20.928Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><h1 id="AOP概述"><a href="#AOP概述" class="headerlink" title="AOP概述"></a>AOP概述</h1><h2 id="什么是-AOP"><a href="#什么是-AOP" class="headerlink" title="什么是 AOP"></a>什么是 AOP</h2><p>AOP 即 Aspect Oriented Program，面向切面编程</p><p>AOP将应用系统拆分为两个部分：核心业务逻辑及横向的通用逻辑，也就是所谓的切面</p><p>AOP 主要应用场景有：</p><ol><li>Authentication 权限</li><li>Caching 缓存</li><li>Context passing 内容传递</li><li>Error handling 错误处理</li><li>Lazy loading 懒加载</li><li>Debugging 调试</li><li>logging, tracing, profiling and monitoring 记录跟踪 优化 校准</li><li>Performance optimization 性能优化</li><li>Persistence 持久化</li><li>Resource pooling 资源池</li><li>Synchronization 同步</li><li>Transactions 事务</li></ol><h3 id="AOP术语"><a href="#AOP术语" class="headerlink" title="AOP术语"></a>AOP术语</h3><ul><li>target：目标类</li><li>joinPoint：连接点是指所有可能织入通知的方法理论上大部分方法都是连接点</li><li>pointCut：切入点，已经被增强的方法</li><li>Weaving：织入，将通知应用到目标对象来创建新的代理对象的过程。</li><li>Aspect：切面，通知所在的类就叫切面。</li><li>Weaving：织入，将通知应用到目标对象来创建新的代理对象的过程</li></ul><h2 id="AOP的实现方式：手动-了解"><a href="#AOP的实现方式：手动-了解" class="headerlink" title="AOP的实现方式：手动 (了解)"></a>AOP的实现方式：手动 (了解)</h2><p>Spring 提供了两种方式来生成代理对象: JDKProxy 和 Cglib，具体使用哪种方式生成由AopProxyFactory 根据 AdvisedSupport 对象的配置来决定。<br>默认的策略是如果目标类是接口，则使用 JDK 动态代理技术，否则使用 Cglib 来生成代理。</p><h3 id="JDK动态代理"><a href="#JDK动态代理" class="headerlink" title="JDK动态代理"></a>JDK动态代理</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserService</span> </span>{</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addUser</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateUser</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteUser</span><span class="params">()</span></span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAspect</span> </span>{</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span></span>{</span><br><span class="line">System.out.println(<span class="string">"before...."</span>);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">after</span><span class="params">()</span></span>{</span><br><span class="line">System.out.println(<span class="string">"after...."</span>);</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBeanFactory</span> </span>{</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> UserService <span class="title">createService</span><span class="params">()</span></span>{</span><br><span class="line"><span class="keyword">final</span> UserService userService = <span class="keyword">new</span> UserServiceImpl();</span><br><span class="line"><span class="keyword">final</span> MyAspect myAspect = <span class="keyword">new</span> MyAspect();</span><br><span class="line">UserService proxService = (UserService)Proxy.newProxyInstance(</span><br><span class="line">                    MyBeanFactory<span class="class">.<span class="keyword">class</span>.<span class="title">getClassLoader</span>(),   //类加载器</span></span><br><span class="line"><span class="class"><span class="title">userService</span>.<span class="title">getClass</span>().<span class="title">getInterfaces</span>(),</span></span><br><span class="line"><span class="class"><span class="title">new</span> <span class="title">InvocationHandler</span>() </span>{ </span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>{</span><br><span class="line">myAspect.before();</span><br><span class="line">Object obj = method.invoke(userService, args);  <span class="comment">//执行目标类的方法</span></span><br><span class="line">myAspect.after();</span><br><span class="line"><span class="keyword">return</span> obj;</span><br><span class="line">}</span><br><span class="line">});</span><br><span class="line"><span class="keyword">return</span> proxService;</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">   <span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">demo01</span><span class="params">()</span></span>{</span><br><span class="line">UserService userService = MyBeanFactory.createService();</span><br><span class="line">userService.addUser();</span><br><span class="line">userService.updateUser();</span><br><span class="line">userService.deleteUser();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><h3 id="CGLIB字节码增强"><a href="#CGLIB字节码增强" class="headerlink" title="CGLIB字节码增强"></a>CGLIB字节码增强</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBeanFactory</span> </span>{</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> UserServiceImpl <span class="title">createService</span><span class="params">()</span></span>{</span><br><span class="line"><span class="keyword">final</span> UserServiceImpl userService = <span class="keyword">new</span> UserServiceImpl();</span><br><span class="line"><span class="keyword">final</span> MyAspect myAspect = <span class="keyword">new</span> MyAspect();</span><br><span class="line"><span class="comment">//代理类 ，采用cglib，底层创建目标类的子类</span></span><br><span class="line">Enhancer enhancer = <span class="keyword">new</span> Enhancer();     <span class="comment">//核心类</span></span><br><span class="line">enhancer.setSuperclass(userService.getClass());     <span class="comment">//确定父类</span></span><br><span class="line">enhancer.setCallback(<span class="keyword">new</span> MethodInterceptor(){       <span class="comment">//设置回调函数</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">intercept</span><span class="params">(Object proxy, Method method, Object[] args, MethodProxy methodProxy)</span> <span class="keyword">throws</span> Throwable </span>{</span><br><span class="line">myAspect.before();</span><br><span class="line">Object obj = method.invoke(userService, args);  <span class="comment">//执行目标方法</span></span><br><span class="line">methodProxy.invokeSuper(proxy, args);   </span><br><span class="line">myAspect.after();</span><br><span class="line"><span class="keyword">return</span> obj;</span><br><span class="line">}</span><br><span class="line">});</span><br><span class="line">UserServiceImpl proxService = (UserServiceImpl) enhancer.create();</span><br><span class="line"><span class="keyword">return</span> proxService;</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><h2 id="通知类型"><a href="#通知类型" class="headerlink" title="通知类型"></a>通知类型</h2><ul><li>前置通知 MethodBeforeAdvice 在目标方法执行前实施增强</li><li>后置通知 AfterReturningAdvice 在目标方法执行后实施增强</li><li>环绕通知 MethodInterceptor 在目标方法执行前后实施增强</li><li>异常抛出通知 ThrowsAdvice 在方法抛出异常后实施增强</li><li>引介通知 IntroductionInterceptor 在目标类中添加一些新的方法和属性</li></ul><p>其中环绕通知必须手动执行目标方法</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>{</span><br><span class="line">    <span class="comment">//前置通知</span></span><br><span class="line">    <span class="comment">//执行目标方法</span></span><br><span class="line">    <span class="comment">//后置通知</span></span><br><span class="line">}<span class="keyword">catch</span>(){</span><br><span class="line">    <span class="comment">//抛出异常通知</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><h2 id="Spring代理：半自动（了解）"><a href="#Spring代理：半自动（了解）" class="headerlink" title="Spring代理：半自动（了解）"></a>Spring代理：半自动（了解）</h2><p>让spring 创建代理对象，从spring容器中手动的获取代理对象。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 切面类中确定通知，需要实现不同接口，接口就是规范，从而就确定方法名称。</span></span><br><span class="line"><span class="comment"> *      MethodInterceptor:环绕通知</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAspect</span> <span class="keyword">implements</span> <span class="title">MethodInterceptor</span> </span>{</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(MethodInvocation mi)</span> <span class="keyword">throws</span> Throwable </span>{</span><br><span class="line">System.out.println(<span class="string">"before...."</span>);</span><br><span class="line"><span class="comment">//执行目标方法</span></span><br><span class="line">Object obj = mi.proceed();</span><br><span class="line">System.out.println(<span class="string">"after...."</span>);</span><br><span class="line"><span class="keyword">return</span> obj;</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">xml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">   <span class="comment"><!-- Spring的配置文件applicationContext.xml --></span></span><br><span class="line"><span class="tag"><<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userServiceId"</span> <span class="attr">class</span>=<span class="string">"com.xxx.service.impl.UserServiceImpl"</span>></span><span class="tag"><!--<span class="name"-->bean</span>></span><br><span class="line"><span class="tag"><<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"myAspectId"</span> <span class="attr">class</span>=<span class="string">"com.xxx.aspect.MyAspect"</span>></span><span class="tag"><!--<span class="name"-->bean</span>></span><br><span class="line">   <span class="comment"><!-- ProxyFactoryBean：用于创建代理工程bean生成特殊代理对象</span></span><br><span class="line"><span class="comment">           需要注入接口，以及目标类，切面类</span></span><br><span class="line"><span class="comment">   --></span></span><br><span class="line"><span class="tag"><<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"proxyServiceId"</span> <span class="attr">class</span>=<span class="string">"org.springframework.aop.framework.ProxyFactoryBean"</span>></span></span><br><span class="line"><span class="tag"><<span class="name">property</span> <span class="attr">name</span>=<span class="string">"interfaces"</span> <span class="attr">value</span>=<span class="string">"com.xxx.service.UserService"</span>></span><span class="tag"><!--<span class="name"-->property</span>></span><br><span class="line"><span class="tag"><<span class="name">property</span> <span class="attr">name</span>=<span class="string">"target"</span> <span class="attr">ref</span>=<span class="string">"userServiceId"</span>></span><span class="tag"><!--<span class="name"-->property</span>></span><br><span class="line"><span class="tag"><<span class="name">property</span> <span class="attr">name</span>=<span class="string">"interceptorNames"</span> <span class="attr">value</span>=<span class="string">"myAspectId"</span>></span><span class="tag"><!--<span class="name"-->property</span>></span><br><span class="line"><span class="tag"><!--<span class="name"-->bean</span>></span><br></pre></td></tr></tbody></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">demo01</span><span class="params">()</span></span>{</span><br><span class="line">String xmlPath = <span class="string">"xxx/applicationContext.xml"</span>;</span><br><span class="line">ApplicationContext applicationContext = <span class="keyword">new</span> ClassPathXmlApplicationContext(xmlPath);</span><br><span class="line"><span class="comment">//获得代理类</span></span><br><span class="line">UserService userService = (UserService) applicationContext.getBean(<span class="string">"proxyServiceId"</span>);</span><br><span class="line">userService.addUser();</span><br><span class="line">userService.updateUser();</span><br><span class="line">userService.deleteUser();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><h2 id="Spring-AOP编程：全自动（掌握）"><a href="#Spring-AOP编程：全自动（掌握）" class="headerlink" title="Spring AOP编程：全自动（掌握）"></a>Spring AOP编程：全自动（掌握）</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">xml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag"><<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userServiceId"</span> <span class="attr">class</span>=<span class="string">"com.xxx.service.impl.UserServiceImpl"</span>></span><span class="tag"><!--<span class="name"-->bean</span>></span><br><span class="line"><span class="tag"><<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"myAspectId"</span> <span class="attr">class</span>=<span class="string">"com.xxx.aspect.MyAspect"</span>></span><span class="tag"><!--<span class="name"-->bean</span>></span><br><span class="line"><span class="tag"><<span class="name">aop:config</span> <span class="attr">proxy-target-class</span>=<span class="string">"true"</span>></span></span><br><span class="line"><span class="tag"><<span class="name">aop:pointcut</span> <span class="attr">expression</span>=<span class="string">"execution(* com.xxx.*.*(..))"</span> <span class="attr">id</span>=<span class="string">"myPointCut"</span>/></span></span><br><span class="line"><span class="comment"><!-- 特殊的切面：只有一个通知和一个切入点 --></span></span><br><span class="line"><span class="tag"><<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">"myAspectId"</span> <span class="attr">pointcut-ref</span>=<span class="string">"myPointCut"</span>/></span></span><br><span class="line"><span class="tag"><!--<span class="name"-->aop:config</span>></span><br></pre></td></tr></tbody></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">demo01</span><span class="params">()</span></span>{</span><br><span class="line">String xmlPath = <span class="string">"xxx/applicationContext.xml"</span>;</span><br><span class="line">ApplicationContext applicationContext = <span class="keyword">new</span> ClassPathXmlApplicationContext(xmlPath);</span><br><span class="line"></span><br><span class="line">UserService userService = (UserService) applicationContext.getBean(<span class="string">"userServiceId"</span>);</span><br><span class="line">userService.addUser();</span><br><span class="line">userService.updateUser();</span><br><span class="line">userService.deleteUser();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><h2 id="基于AspectJ"><a href="#基于AspectJ" class="headerlink" title="基于AspectJ"></a>基于AspectJ</h2><p>AspectJ是一个AOP框架</p><h3 id="切入点表达式"><a href="#切入点表达式" class="headerlink" title="切入点表达式 *"></a>切入点表达式 *</h3><p>execution(* com . xxx . * . * ( .. ))<br>excecution(修饰符（省略） 返回值 包.类.方法名(参数) throws 异常)<br>*代表任意值</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAspect</span> </span>{</span><br><span class="line">    <span class="comment">//环绕通知</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">myAround</span><span class="params">(ProceedingJoinPoint joinPoint)</span> <span class="keyword">throws</span> Throwable</span>{</span><br><span class="line">System.out.println(<span class="string">"before..."</span>);</span><br><span class="line"><span class="comment">//执行目标方法</span></span><br><span class="line">Object obj = joinPoint.proceed();</span><br><span class="line">System.out.println(<span class="string">"after..."</span>);</span><br><span class="line"><span class="keyword">return</span> obj;</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">xml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag"><<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userServiceId"</span> <span class="attr">class</span>=<span class="string">"com.itheima.d_aspect.a_xml.UserServiceImpl"</span>></span><span class="tag"><!--<span class="name"-->bean</span>></span><br><span class="line"><span class="tag"><<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"myAspectId"</span> <span class="attr">class</span>=<span class="string">"com.itheima.d_aspect.a_xml.MyAspect"</span>></span><span class="tag"><!--<span class="name"-->bean</span>></span><br><span class="line"><span class="tag"><<span class="name">aop:config</span>></span></span><br><span class="line"><span class="tag"><<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">"myAspectId"</span>></span></span><br><span class="line"><span class="tag"><<span class="name">aop:pointcut</span> <span class="attr">expression</span>=<span class="string">"execution(* com.xxx.service.impl.UserServiceImpl.*(..))"</span> <span class="attr">id</span>=<span class="string">"myPointCut"</span>/></span></span><br><span class="line"><span class="comment"><!-- 其他通知类似 --></span></span><br><span class="line"><span class="tag"><<span class="name">aop:around</span> <span class="attr">method</span>=<span class="string">"myAround"</span> <span class="attr">pointcut-ref</span>=<span class="string">"myPointCut"</span>/></span></span><br><span class="line"><span class="tag"><!--<span class="name"-->aop:config</span>></span><br></pre></td></tr></tbody></table></figure></div></body></html>]]></content>
    
    <summary type="html">
    
      
      
        &lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;h1 id=&quot;AOP概述&quot;&gt;&lt;a href=&quot;#AOP概述&quot; class=&quot;headerlink&quot; title=&quot;AOP概述&quot;&gt;&lt;/a&gt;AOP概述&lt;/h1&gt;&lt;h2 id=&quot;什么是-AOP&quot;&gt;&lt;a href=&quot;#什么是-AOP&quot; 
      
    
    </summary>
    
    
      <category term="框架" scheme="https://qihuang7.top/categories/%E6%A1%86%E6%9E%B6/"/>
    
      <category term="spring" scheme="https://qihuang7.top/categories/%E6%A1%86%E6%9E%B6/spring/"/>
    
    
      <category term="基础" scheme="https://qihuang7.top/tags/%E5%9F%BA%E7%A1%80/"/>
    
      <category term="SSM" scheme="https://qihuang7.top/tags/SSM/"/>
    
      <category term="spring" scheme="https://qihuang7.top/tags/spring/"/>
    
  </entry>
  
  <entry>
    <title>每日一题：圆圈中最后剩下的数字</title>
    <link href="https://qihuang7.top/2020/04/04/leetcode/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98%EF%BC%9A%E5%9C%86%E5%9C%88%E4%B8%AD%E6%9C%80%E5%90%8E%E5%89%A9%E4%B8%8B%E7%9A%84%E6%95%B0%E5%AD%97/"/>
    <id>https://qihuang7.top/2020/04/04/leetcode/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98%EF%BC%9A%E5%9C%86%E5%9C%88%E4%B8%AD%E6%9C%80%E5%90%8E%E5%89%A9%E4%B8%8B%E7%9A%84%E6%95%B0%E5%AD%97/</id>
    <published>2020-04-04T12:37:29.000Z</published>
    <updated>2020-04-04T12:40:28.776Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><h1 id="62-圆圈中最后剩下的数字"><a href="#62-圆圈中最后剩下的数字" class="headerlink" title="62.圆圈中最后剩下的数字"></a>62.圆圈中最后剩下的数字</h1><p><strong>难度：</strong> 简单</p><p><strong>题目：</strong> 0,1,,n-1这n个数字排成一个圆圈，从数字0开始，每次从这个圆圈里删除第m个数字。求出这个圆圈里剩下的最后一个数字。</p><p>例如，0、1、2、3、4这5个数字组成一个圆圈，从数字0开始每次删除第3个数字，则删除的前4个数字依次是2、0、4、1，因此最后剩下的数字是3。</p><hr><p><strong>示例1：输入：</strong> n = 5，m = 3    <strong>输出：</strong> 3</p><p><strong>示例2：输入：</strong> n = 10，m = 17    <strong>输出：</strong> 2</p><hr><p><strong>限制：</strong> </p><ul><li>1 <= n <=10^5     </li><li>1 <= m <=10^6</li></ul><p><strong>解题1 模拟做法</strong></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">lastRemaining</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> m)</span> </span>{</span><br><span class="line">        ArrayList<integer> list = <span class="keyword">new</span> ArrayList<>(n);</integer></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i < n; i++) {</span><br><span class="line">            list.add(i);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">int</span> idx = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (n > <span class="number">1</span>) {</span><br><span class="line">            idx = (idx + m - <span class="number">1</span>) % n;</span><br><span class="line">            list.remove(idx);</span><br><span class="line">            n--;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> list.get(<span class="number">0</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><p><strong>思路</strong></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">n=5,m=3,idx=00 1 2 3 4</span><br><span class="line">n=5idx=(0+3-1)%5=2%5=2remove(2)0 1 3 4</span><br><span class="line">n=4idx=(2+3-1)%4=4%4=0remove(0)1 3 4</span><br><span class="line">n=3idx=(0+3-1)%3=2%3=2remove(2)1 3</span><br><span class="line">n=2idx=(2+3-1)%2=4%2=0remove(0)3</span><br><span class="line">n=1</span><br></pre></td></tr></tbody></table></figure></div><p><strong>题解2 数学方法</strong></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">lastRemaining</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> m)</span> </span>{</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 最后一轮剩下2个人，所以从2开始反推</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i <= n; i++) {</span><br><span class="line">            ans = (ans + m) % i;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div></body></html>]]></content>
    
    <summary type="html">
    
      
      
        &lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;h1 id=&quot;62-圆圈中最后剩下的数字&quot;&gt;&lt;a href=&quot;#62-圆圈中最后剩下的数字&quot; class=&quot;headerlink&quot; title=&quot;62.圆圈中最后剩下的数字&quot;&gt;&lt;/a&gt;62.圆圈中最后剩下的数字&lt;/h1&gt;&lt;p&gt;&lt;
      
    
    </summary>
    
    
      <category term="leetcode" scheme="https://qihuang7.top/categories/leetcode/"/>
    
    
      <category term="leetcode" scheme="https://qihuang7.top/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>java多线程基础（四）：线程的状态及主要转化方法</title>
    <link href="https://qihuang7.top/2020/04/04/%E5%A4%9A%E7%BA%BF%E7%A8%8B/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%9F%BA%E7%A1%80%EF%BC%88%E5%9B%9B%EF%BC%89%EF%BC%9A%E7%BA%BF%E7%A8%8B%E7%9A%84%E7%8A%B6%E6%80%81%E5%8F%8A%E4%B8%BB%E8%A6%81%E8%BD%AC%E6%8D%A2%E6%96%B9%E6%B3%95/"/>
    <id>https://qihuang7.top/2020/04/04/%E5%A4%9A%E7%BA%BF%E7%A8%8B/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%9F%BA%E7%A1%80%EF%BC%88%E5%9B%9B%EF%BC%89%EF%BC%9A%E7%BA%BF%E7%A8%8B%E7%9A%84%E7%8A%B6%E6%80%81%E5%8F%8A%E4%B8%BB%E8%A6%81%E8%BD%AC%E6%8D%A2%E6%96%B9%E6%B3%95/</id>
    <published>2020-04-04T11:27:53.000Z</published>
    <updated>2020-04-04T15:35:17.553Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><h1 id="第四章-Java线程的状态及主要转化方法"><a href="#第四章-Java线程的状态及主要转化方法" class="headerlink" title="第四章 Java线程的状态及主要转化方法"></a>第四章 Java线程的状态及主要转化方法</h1><h2 id="操作系统中的线程状态转换"><a href="#操作系统中的线程状态转换" class="headerlink" title="操作系统中的线程状态转换"></a>操作系统中的线程状态转换</h2><p>线程被视为轻量级线程，所有操作系统 <strong>线程的状态和进程的状态是一致的</strong></p><p><a href="https://myblog-file.oss-cn-shenzhen.aliyuncs.com/java/basic/%E7%BA%BF%E7%A8%8B%E7%8A%B6%E6%80%81%E8%BD%AC%E6%8D%A2.PNG" data-fancybox="group" data-caption="操作系统线程的状态" class="fancybox"><img alt="操作系统线程的状态" title="操作系统线程的状态" data-src="https://myblog-file.oss-cn-shenzhen.aliyuncs.com/java/basic/%E7%BA%BF%E7%A8%8B%E7%8A%B6%E6%80%81%E8%BD%AC%E6%8D%A2.PNG" class="lazyload"></a></p><p>线程主要有以下三个状态：</p><ul><li>就绪状态(ready)：线程正在等待使用CPU，经调度程序调用之后可进入running状态</li><li>执行状态(running)：线程正在使用CPU</li><li>等待状态(waiting)：线程经过等待事件的调用或者正在等待其他资源（如I/O）。</li></ul><h2 id="线程的六个状态："><a href="#线程的六个状态：" class="headerlink" title="线程的六个状态："></a>线程的六个状态：</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Thread.State 源码</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> State {</span><br><span class="line">    NEW,</span><br><span class="line">    RUNNABLE,       </span><br><span class="line">    BLOCKED,        <span class="comment">//阻塞状态</span></span><br><span class="line">    WAITING,        <span class="comment">//等待状态</span></span><br><span class="line">    TIMED_WAITING,  <span class="comment">//</span></span><br><span class="line">    超时等待状态</span><br><span class="line">    TERMINATED;     <span class="comment">//终止状态，此时线程已执行完毕</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><h3 id="start-的两个问题"><a href="#start-的两个问题" class="headerlink" title="start()的两个问题"></a>start()的两个问题</h3><blockquote><p>反复调用同一个线程的start()方法是否可行？<br>假如一个线程执行完毕（此时处于TERMINATED状态），再次调用这个线程的start()方法是否可行？</p></blockquote><p>首先看一下start()的源码</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="keyword">if</span> (threadStatus != <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalThreadStateException();</span><br><span class="line">    group.add(<span class="keyword">this</span>);</span><br><span class="line">    <span class="keyword">boolean</span> started = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">try</span> {</span><br><span class="line">        start0();</span><br><span class="line">        started = <span class="keyword">true</span>;</span><br><span class="line">    } <span class="keyword">finally</span> {</span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            <span class="keyword">if</span> (!started) {</span><br><span class="line">                group.threadStartFailed(<span class="keyword">this</span>);</span><br><span class="line">            }</span><br><span class="line">        } <span class="keyword">catch</span> (Throwable ignore) {</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><p>在start()内部有一个threadStatus变量，如果不等于0调用start()会直接抛出异常。</p><blockquote><p>在调用一次start()之后，threadStatus的值会改变，此时再调start()方法会抛出异常  比如，threadStatus为2代表当前线程状态为TERMINATED</p></blockquote><h2 id="线程状态转换"><a href="#线程状态转换" class="headerlink" title="线程状态转换"></a>线程状态转换</h2><p><a href="https://myblog-file.oss-cn-shenzhen.aliyuncs.com/java/basic/%E7%BA%BF%E7%A8%8B%E7%8A%B6%E6%80%81%E8%BD%AC%E6%8D%A2%E5%9B%BE.PNG" data-fancybox="group" data-caption="线程状态转换图" class="fancybox"><img alt="线程状态转换图" title="线程状态转换图" data-src="https://myblog-file.oss-cn-shenzhen.aliyuncs.com/java/basic/%E7%BA%BF%E7%A8%8B%E7%8A%B6%E6%80%81%E8%BD%AC%E6%8D%A2%E5%9B%BE.PNG" class="lazyload"></a></p><h3 id="BLOCKED与RUNNABLE状态转换"><a href="#BLOCKED与RUNNABLE状态转换" class="headerlink" title="BLOCKED与RUNNABLE状态转换"></a>BLOCKED与RUNNABLE状态转换</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">blockedTest</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>{</span><br><span class="line">    Thread a = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() {</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>{</span><br><span class="line">          testMethod();</span><br><span class="line">        }</span><br><span class="line">    }, <span class="string">"a"</span>);</span><br><span class="line">    Thread b = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() {</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>{</span><br><span class="line">            testMethod();</span><br><span class="line">        }</span><br><span class="line">    }, <span class="string">"b"</span>);</span><br><span class="line">    a.start();</span><br><span class="line">    Thread.sleep(<span class="number">1000L</span>); <span class="comment">// 需要注意这⾥main线程休眠了1000毫秒，⽽testMethod()⾥休眠了2000毫秒</span></span><br><span class="line">    b.start();</span><br><span class="line">    System.out.println(a.getName() + <span class="string">":"</span> + a.getState()); <span class="comment">// 输出TIMED_WAITING</span></span><br><span class="line">    System.out.println(b.getName() + <span class="string">":"</span> + b.getState()); <span class="comment">// 输出BLOCKED </span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 同步⽅法争夺锁</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">testMethod</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            Thread.sleep(<span class="number">2000L</span>);</span><br><span class="line">        } <span class="keyword">catch</span> (InterruptedException e) {</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><p>处于Blocked状态的线程是因为在等待锁的释放。假如有两个线程a和b，a线程提前获得了锁并且暂未释放锁，此时b就处于Blocked状态。</p><p>在线程a执⾏run()调⽤testMethod()之后，线程a休眠了2000ms（注意这⾥是没有释放锁的），main线程休眠完毕，接着b线程执⾏的时候是争夺不到锁的</p><h3 id="WAITING与RUNNABLE状态转换"><a href="#WAITING与RUNNABLE状态转换" class="headerlink" title="WAITING与RUNNABLE状态转换"></a>WAITING与RUNNABLE状态转换</h3><ul><li>Object.wait()：<br>  调⽤wait()⽅法前线程必须持有对象的锁。<br>  线程调⽤wait()⽅法时，会释放当前的锁，直到有其他线程调⽤notify()/notifyAll()⽅法唤醒等待锁的线程。</li><li>Thread.join()：<br>调⽤join()⽅法不会释放锁，会⼀直等待当前线程执⾏完毕（转换为TERMINATED状态）。</li><li>LockSupport.park()：<br>除⾮获得调⽤许可，否则禁⽤当前线程进⾏线程调度。</li></ul><h3 id="TIMED-WAITING与RUNNABLE状态转换"><a href="#TIMED-WAITING与RUNNABLE状态转换" class="headerlink" title="TIMED_WAITING与RUNNABLE状态转换"></a>TIMED_WAITING与RUNNABLE状态转换</h3><p> TIMED_WAITING 与 WAITING 状态类似，只是 TIMED_WAITING 状态等待的时间是指定的</p><h3 id="线程中断"><a href="#线程中断" class="headerlink" title="线程中断"></a>线程中断</h3><blockquote><p>在某些情况下，我们在线程启动后发现并不需要它继续执⾏下去时，需要中断线程。⽬前在Java⾥还没有安全直接的⽅法来停⽌线程，但是Java提供了线程中断机制来处理需要中断线程的情况。<br><strong>线程中断机制是⼀种协作机制。</strong> 需要注意，通过中断操作并不能直接终⽌⼀个线程，⽽是 <strong>通知需要被中断的线程⾃⾏处理。</strong></p></blockquote><p>线程中断的几个方法：</p><ul><li>Thread.interrupt()：中断线程。这⾥的中断线程并不会⽴即停⽌线程，⽽是设置线程的中断状态为true（默认是flase）</li><li>Thread.interrupted()：测试当前线程是否被中断。</li><li>Thread.isInterrupted()：测试当前线程是否被中断。</li></ul></body></html>]]></content>
    
    <summary type="html">
    
      
      
        &lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;h1 id=&quot;第四章-Java线程的状态及主要转化方法&quot;&gt;&lt;a href=&quot;#第四章-Java线程的状态及主要转化方法&quot; class=&quot;headerlink&quot; title=&quot;第四章 Java线程的状态及主要转化方法&quot;&gt;&lt;/a&gt;第
      
    
    </summary>
    
    
      <category term="java基础" scheme="https://qihuang7.top/categories/java%E5%9F%BA%E7%A1%80/"/>
    
      <category term="多线程" scheme="https://qihuang7.top/categories/java%E5%9F%BA%E7%A1%80/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
    
      <category term="java" scheme="https://qihuang7.top/tags/java/"/>
    
      <category term="基础" scheme="https://qihuang7.top/tags/%E5%9F%BA%E7%A1%80/"/>
    
      <category term="多线程" scheme="https://qihuang7.top/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>java多线程基础（三）：线程组和线程优先级</title>
    <link href="https://qihuang7.top/2020/04/04/%E5%A4%9A%E7%BA%BF%E7%A8%8B/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%9F%BA%E7%A1%80%EF%BC%88%E4%B8%89%EF%BC%89%EF%BC%9A%E7%BA%BF%E7%A8%8B%E7%BB%84%E5%92%8C%E7%BA%BF%E7%A8%8B%E4%BC%98%E5%85%88%E7%BA%A7/"/>
    <id>https://qihuang7.top/2020/04/04/%E5%A4%9A%E7%BA%BF%E7%A8%8B/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%9F%BA%E7%A1%80%EF%BC%88%E4%B8%89%EF%BC%89%EF%BC%9A%E7%BA%BF%E7%A8%8B%E7%BB%84%E5%92%8C%E7%BA%BF%E7%A8%8B%E4%BC%98%E5%85%88%E7%BA%A7/</id>
    <published>2020-04-03T17:09:53.000Z</published>
    <updated>2020-04-04T15:35:18.537Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><h1 id="第三章-线程组和线程优先级"><a href="#第三章-线程组和线程优先级" class="headerlink" title="第三章 线程组和线程优先级"></a>第三章 线程组和线程优先级</h1><h2 id="线程组（ThreadGroup）"><a href="#线程组（ThreadGroup）" class="headerlink" title="线程组（ThreadGroup）"></a>线程组（ThreadGroup）</h2><blockquote><p><strong>线程组可以对线程进行批量控制</strong><br>每个Thread必然存在于一个ThreadGroup中，<strong>Threa不能独立于ThreadGroup存在</strong>。<br>执行main()方法的线程名字是mian，如果在new Thread时没有显式指定，那么 <strong>默认将父线程</strong>（当前执⾏ new Thread的线程）的 <strong>线程组设置为自己的线程组</strong></p></blockquote><p>示例代码：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        Thread testThread = <span class="keyword">new</span> Thread(() -> {</span><br><span class="line">            System.out.println(<span class="string">"testThread当前线程组名字："</span> +</span><br><span class="line">                Thread.currentThread().getThreadGroup().getName());</span><br><span class="line">            System.out.println(<span class="string">"testThread线程名字："</span> +</span><br><span class="line">                Thread.currentThread().getName());</span><br><span class="line">        });</span><br><span class="line">        testThread.start();</span><br><span class="line">        System.out.println(<span class="string">"执⾏main⽅法线程名字："</span> + Thread.currentThread().getName());</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="comment">/*输出结果：</span></span><br><span class="line"><span class="comment">    执⾏main⽅法线程名字：main</span></span><br><span class="line"><span class="comment">    testThread当前线程组名字：main</span></span><br><span class="line"><span class="comment">    testThread线程名字：Thread-0</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></tbody></table></figure></div><p>ThreadGroup管理着它下⾯的Thread，ThreadGroup是⼀个标准的向下引⽤的树状结构，这样设计的原因是 <strong>防⽌”上级”线程被”下级”线程引用而无法有效地被GC（Garbage Collector垃圾收集器）回收</strong></p><h2 id="线程的优先级"><a href="#线程的优先级" class="headerlink" title="线程的优先级"></a>线程的优先级</h2><p>java中线程优先级可以制指定，范围是1~10，默认为5（有些操作系统只支持3级划分：低，中，高），java只是给操作系统一个优先级的 <strong>参考值</strong>，<strong>线程最终在操作系统的优先级是多少还是由操作系统决定</strong></p><p>使⽤Thread类的setPriority()⽅法来设定线程的优先级。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Thread a = <span class="keyword">new</span> Thread();</span><br><span class="line">a.setPriority(<span class="number">10</span>);</span><br></pre></td></tr></tbody></table></figure></div><h3 id="是不是可以在业务实现的时候采用这种方法来指定一些线程执行的先后顺序？"><a href="#是不是可以在业务实现的时候采用这种方法来指定一些线程执行的先后顺序？" class="headerlink" title="是不是可以在业务实现的时候采用这种方法来指定一些线程执行的先后顺序？"></a>是不是可以在业务实现的时候采用这种方法来指定一些线程执行的先后顺序？</h3><p>答案：No！java中的优先级并不是特别可靠，<strong>Java程序中对线程所设置的优先级只是给操作系统一个建议，操作系统不一定会采纳。而真正的调用顺序，是由操作系统的线程调度算法决定的。</strong></p><p>验证：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>{</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">T1</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>{</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>{</span><br><span class="line">            <span class="keyword">super</span>.run();</span><br><span class="line">            System.out.println(String.format(<span class="string">"当前执⾏的线程是：%s，优先级：%d"</span>,</span><br><span class="line">                                Thread.currentThread().getName(),</span><br><span class="line">                                Thread.currentThread().getPriority()));</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        IntStream.range(<span class="number">1</span>, <span class="number">10</span>).forEach(i -> {</span><br><span class="line">            Thread thread = <span class="keyword">new</span> Thread(<span class="keyword">new</span> T1());</span><br><span class="line">            thread.setPriority(i);</span><br><span class="line">            thread.start();</span><br><span class="line">        });</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="comment">/*某次输出:</span></span><br><span class="line"><span class="comment">        当前执⾏的线程是：Thread-17，优先级：9 </span></span><br><span class="line"><span class="comment">        当前执⾏的线程是：Thread-1，优先级：1 </span></span><br><span class="line"><span class="comment">        当前执⾏的线程是：Thread-13，优先级：7 </span></span><br><span class="line"><span class="comment">        当前执⾏的线程是：Thread-11，优先级：6 </span></span><br><span class="line"><span class="comment">        当前执⾏的线程是：Thread-15，优先级：8 </span></span><br><span class="line"><span class="comment">        当前执⾏的线程是：Thread-7，优先级：4 </span></span><br><span class="line"><span class="comment">        当前执⾏的线程是：Thread-9，优先级：5 </span></span><br><span class="line"><span class="comment">        当前执⾏的线程是：Thread-3，优先级：2 </span></span><br><span class="line"><span class="comment">        当前执⾏的线程是：Thread-5，优先级：3</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></tbody></table></figure></div><blockquote><p>Java提供一个 <strong>线程调度器</strong> 来监视处于 <strong>runnable</strong> 状态的线程。<br>线程的调度策略采用 <strong>抢占式</strong>，优先级高的线程比优先级低的线程会有更大的几率优先执行。<br><strong>优先级相同</strong> 的情况下按照 <strong>“先到先得”</strong> 的原则。</p></blockquote><h3 id="当线程和所在线程组的优先级不一致时会怎样？"><a href="#当线程和所在线程组的优先级不一致时会怎样？" class="headerlink" title="当线程和所在线程组的优先级不一致时会怎样？"></a>当线程和所在线程组的优先级不一致时会怎样？</h3><p><strong>答案：如果某个线程优先级⼤于线程所在线程组的最⼤优先级，那么该线程的优先 级将会失效，取⽽代之的是线程组的最⼤优先级。</strong></p><p>验证：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">    ThreadGroup threadGroup = <span class="keyword">new</span> ThreadGroup(<span class="string">"t1"</span>);</span><br><span class="line">    threadGroup.setMaxPriority(<span class="number">6</span>);</span><br><span class="line">    Thread thread = <span class="keyword">new</span> Thread(threadGroup,<span class="string">"thread"</span>);</span><br><span class="line">    thread.setPriority(<span class="number">9</span>);</span><br><span class="line">    System.out.println(<span class="string">"我是线程组的优先级"</span>+threadGroup.getMaxPriority());</span><br><span class="line">    System.out.println(<span class="string">"我是线程的优先级"</span>+thread.getPriority());</span><br><span class="line">}</span><br><span class="line"><span class="comment">/* 输出：      </span></span><br><span class="line"><span class="comment">        我是线程组的优先级6       </span></span><br><span class="line"><span class="comment">        我是线程的优先级6</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></tbody></table></figure></div><h3 id="守护线程（Daemon）"><a href="#守护线程（Daemon）" class="headerlink" title="守护线程（Daemon）"></a>守护线程（Daemon）</h3><p>守护线程默认的优先级比较低，如果所有的非守护线程结束，这个守护线程会自动结束。</p><p><strong>应用场景：</strong> 当所有非守护线程结束时，结束其余的子线程（自动关闭）自动关闭，就免去了还要继续关闭子线程的麻烦</p><p>可以通过Thread类的setDaemon（boolean on)来设置守护线程</p><h2 id="线程组的常用方法级数据结构"><a href="#线程组的常用方法级数据结构" class="headerlink" title="线程组的常用方法级数据结构"></a>线程组的常用方法级数据结构</h2><h3 id="线程组的常用方法"><a href="#线程组的常用方法" class="headerlink" title="线程组的常用方法"></a>线程组的常用方法</h3><ul><li>获取当前线程组的名字：<blockquote><p>Thread.currentThread().getThreadGroup().getName()</p></blockquote></li><li>复制线程组：<blockquote><p>Thread[] threads = new Thread[threadGroup.activeCount()];<br>TheadGroup threadGroup = new ThreadGroup();<br>threadGroup.enumerate(threads);</p></blockquote></li><li>线程组统一异常处理<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadGroupDemo</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        ThreadGroup threadGroup1 = <span class="keyword">new</span> ThreadGroup(<span class="string">"group1"</span>) {</span><br><span class="line">            <span class="comment">// 继承ThreadGroup并重新定义以下⽅法</span></span><br><span class="line">            <span class="comment">// 在线程成员抛出unchecked exception</span></span><br><span class="line">            <span class="comment">// 会执⾏此⽅法</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">uncaughtException</span><span class="params">(Thread t, Throwable e)</span> </span>{</span><br><span class="line">                System.out.println(t.getName() + <span class="string">": "</span> + e.getMessage());</span><br><span class="line">            }</span><br><span class="line">        };</span><br><span class="line">        <span class="comment">// 这个线程是threadGroup1的⼀员</span></span><br><span class="line">        Thread thread1 = <span class="keyword">new</span> Thread(threadGroup1, <span class="keyword">new</span> Runnable() {</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>{</span><br><span class="line">                <span class="comment">// 抛出unchecked异常</span></span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"测试异常"</span>);</span><br><span class="line">            }</span><br><span class="line">        });</span><br><span class="line">        thread1.start();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><h3 id="线程组的数据结构"><a href="#线程组的数据结构" class="headerlink" title="线程组的数据结构"></a>线程组的数据结构</h3>线程组可以包含其他的线程组，不仅仅是线程 </li></ul><p>总结来说， <strong>线程组是⼀个树状的结构</strong> ，每个线程组下⾯可以有多个线程或者线程 组。线程组可以起到 <strong>统⼀控制线程的优先级</strong> 和 <strong>检查线程的权限</strong> 的作⽤。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadGroup</span> <span class="keyword">implements</span> <span class="title">Thread</span>.<span class="title">UncaughtExceptionHandler</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="comment">//===========TheadGroup源码中的成员变量============</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ThreadGroup parent; <span class="comment">// ⽗亲ThreadGroup</span></span><br><span class="line">    String name; <span class="comment">// ThreadGroupr 的名称</span></span><br><span class="line">    <span class="keyword">int</span> maxPriority; <span class="comment">// 线程最⼤优先级</span></span><br><span class="line">    <span class="keyword">boolean</span> destroyed; <span class="comment">// 是否被销毁</span></span><br><span class="line">    <span class="keyword">boolean</span> daemon; <span class="comment">// 是否守护线程</span></span><br><span class="line">    <span class="keyword">boolean</span> vmAllowSuspension; <span class="comment">// 是否可以中断</span></span><br><span class="line">    <span class="keyword">int</span> nUnstartedThreads = <span class="number">0</span>; <span class="comment">// 还未启动的线程</span></span><br><span class="line">    <span class="keyword">int</span> nthreads; <span class="comment">// ThreadGroup中线程数⽬</span></span><br><span class="line">    Thread threads[]; <span class="comment">// ThreadGroup中的线程</span></span><br><span class="line">    <span class="keyword">int</span> ngroups; <span class="comment">// 线程组数⽬</span></span><br><span class="line">    ThreadGroup groups[]; <span class="comment">// 线程组数组 </span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//===========TheadGroup源码中的构造函数============</span></span><br><span class="line">    <span class="comment">// 私有构造函数</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">ThreadGroup</span><span class="params">()</span> </span>{ </span><br><span class="line">        <span class="keyword">this</span>.name = <span class="string">"system"</span>;</span><br><span class="line">        <span class="keyword">this</span>.maxPriority = Thread.MAX_PRIORITY;</span><br><span class="line">        <span class="keyword">this</span>.parent = <span class="keyword">null</span>; </span><br><span class="line">    }</span><br><span class="line">    <span class="comment">// 默认是以当前ThreadGroup传⼊作为parent ThreadGroup，新线程组的⽗线程组是⽬前正在运⾏线</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ThreadGroup</span><span class="params">(String name)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>(Thread.currentThread().getThreadGroup(), name);</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">// 构造函数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ThreadGroup</span><span class="params">(ThreadGroup parent, String name)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>(checkParentAccess(parent), parent, name);</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">// 私有构造函数，主要的构造函数</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">ThreadGroup</span><span class="params">(Void unused, ThreadGroup parent, String name)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.maxPriority = parent.maxPriority;</span><br><span class="line">        <span class="keyword">this</span>.daemon = parent.daemon;</span><br><span class="line">        <span class="keyword">this</span>.vmAllowSuspension = parent.vmAllowSuspension;</span><br><span class="line">        <span class="keyword">this</span>.parent = parent;</span><br><span class="line">        parent.add(<span class="keyword">this</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><p>第三个构造函数中调用了checkParentAccess方法，判断当前运⾏的线程是否具有修改线程组的权限</p></body></html>]]></content>
    
    <summary type="html">
    
      
      
        &lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;h1 id=&quot;第三章-线程组和线程优先级&quot;&gt;&lt;a href=&quot;#第三章-线程组和线程优先级&quot; class=&quot;headerlink&quot; title=&quot;第三章 线程组和线程优先级&quot;&gt;&lt;/a&gt;第三章 线程组和线程优先级&lt;/h1&gt;&lt;h2 
      
    
    </summary>
    
    
      <category term="java基础" scheme="https://qihuang7.top/categories/java%E5%9F%BA%E7%A1%80/"/>
    
      <category term="多线程" scheme="https://qihuang7.top/categories/java%E5%9F%BA%E7%A1%80/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
    
      <category term="java" scheme="https://qihuang7.top/tags/java/"/>
    
      <category term="基础" scheme="https://qihuang7.top/tags/%E5%9F%BA%E7%A1%80/"/>
    
      <category term="多线程" scheme="https://qihuang7.top/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
      <category term="优先级" scheme="https://qihuang7.top/tags/%E4%BC%98%E5%85%88%E7%BA%A7/"/>
    
  </entry>
  
  <entry>
    <title>每日一题：用两个栈实现队列</title>
    <link href="https://qihuang7.top/2020/04/03/leetcode/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98%EF%BC%9A%E7%94%A8%E4%B8%A4%E4%B8%AA%E9%98%9F%E5%88%97%E5%AE%9E%E7%8E%B0%E6%A0%88/"/>
    <id>https://qihuang7.top/2020/04/03/leetcode/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98%EF%BC%9A%E7%94%A8%E4%B8%A4%E4%B8%AA%E9%98%9F%E5%88%97%E5%AE%9E%E7%8E%B0%E6%A0%88/</id>
    <published>2020-04-03T14:12:52.000Z</published>
    <updated>2020-04-04T16:52:29.387Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><h1 id="225-用队列实现栈"><a href="#225-用队列实现栈" class="headerlink" title="225.用队列实现栈"></a>225.用队列实现栈</h1><p>使用队列实现栈的下列操作：</p><ul><li>push(x) – 元素 x 入栈</li><li>pop() – 移除栈顶元素</li><li>top() – 获取栈顶元素</li><li>empty() – 返回栈是否为空</li></ul><p><strong>注意:</strong></p><ul><li>你只能使用队列的基本操作– 也就是 push to back, peek/pop from front, size, 和 is empty 这些操作是合法的。</li><li>你所使用的语言也许不支持队列。 你可以使用 list 或者 deque（双端队列）来模拟一个队列 , 只要是标准的队列操作即可。</li><li>你可以假设所有操作都是有效的（例如, 对一个空的栈不会调用 pop 或者 top 操作）。</li></ul><h2 id="官方题解：（两个队列，-压入-O-n-，-弹出-O-1-）"><a href="#官方题解：（两个队列，-压入-O-n-，-弹出-O-1-）" class="headerlink" title="官方题解：（两个队列， 压入 - O(n)， 弹出 - O(1)）"></a>官方题解：（两个队列， 压入 - O(n)， 弹出 - O(1)）</h2><h3 id="压入（push）"><a href="#压入（push）" class="headerlink" title="压入（push）"></a>压入（push）</h3><p>接下来介绍的算法让每一个新元素从 q2 入队，同时把这个元素作为栈顶元素保存。当 q1 非空（也就是栈非空），我们让 q1 中所有的元素全部出队，再将出队的元素从 q2 入队。通过这样的方式，新元素（栈中的栈顶元素）将会在 q2 的前端。我们通过将 q1， q2 互相交换的方式来避免把 q2 中的元素往 q1 中拷贝。</p><p><a href="https://pic.leetcode-cn.com/1acd10c255534e86719cf83b07f294c76967687c52db3ec44367d0cb7c45483e-file_1561370741978" data-fancybox="group" data-caption="push压入" class="fancybox"><img alt="push压入" title="push压入" data-src="https://pic.leetcode-cn.com/1acd10c255534e86719cf83b07f294c76967687c52db3ec44367d0cb7c45483e-file_1561370741978" class="lazyload"></a></p><p><strong>复杂度分析</strong></p><ul><li>*<em>时间复杂度：O(n)  *</em><br>算法会让 q1 出队 n 个元素，同时入队 n+1 个元素到 q2。这个过程会产生 2n+1 步操作，同时链表中 插入 操作和 移除 操作的时间复杂度为 O(1)，因此时间复杂度为 O(n)。</li><li><strong>空间复杂度：O(1)</strong></li></ul><h3 id="弹出（pop）"><a href="#弹出（pop）" class="headerlink" title="弹出（pop）"></a>弹出（pop）</h3><p>直接让 q1 中元素出队，同时将出队后的 q1 中的队首元素作为栈顶元素保存。</p><p><a href="https://pic.leetcode-cn.com/fc27d76b78bbe094f6912a0aa56dee5f8e618a4f04834ab043eb39ecb2e0cc93-file_1561370741978" data-fancybox="group" data-caption="pop弹出" class="fancybox"><img alt="pop弹出" title="pop弹出" data-src="https://pic.leetcode-cn.com/fc27d76b78bbe094f6912a0aa56dee5f8e618a4f04834ab043eb39ecb2e0cc93-file_1561370741978" class="lazyload"></a></p><p><strong>复杂度分析</strong></p><ul><li>时间复杂度：O(1)</li><li>空间复杂度：O(1)</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyStack</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> Queue<integer> q1 = <span class="keyword">new</span> LinkedList<>();;</integer></span><br><span class="line">    <span class="keyword">private</span> Queue<integer> q2 = <span class="keyword">new</span> LinkedList<>();</integer></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> top;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/** Initialize your data structure here. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyStack</span><span class="params">()</span> </span>{</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">/** 压栈 */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{</span><br><span class="line">        q2.add(x);</span><br><span class="line">        top = x;</span><br><span class="line">        <span class="keyword">while</span> (!q1.isEmpty()) {                </span><br><span class="line">            q2.add(q1.remove());</span><br><span class="line">        }</span><br><span class="line">        Queue<integer> temp = q1;</integer></span><br><span class="line">        q1 = q2;</span><br><span class="line">        q2 = temp;</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">/** 出栈 */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">pop</span><span class="params">()</span> </span>{</span><br><span class="line">        q1.remove();</span><br><span class="line">        <span class="keyword">int</span> res = top;</span><br><span class="line">        <span class="keyword">if</span> (!q1.isEmpty()) {</span><br><span class="line">            top = q1.peek();</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">/** 获取栈顶元素 */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">top</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> top;</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">/** Returns whether the stack is empty. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">empty</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> q1.isEmpty();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div></body></html>]]></content>
    
    <summary type="html">
    
      
      
        &lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;h1 id=&quot;225-用队列实现栈&quot;&gt;&lt;a href=&quot;#225-用队列实现栈&quot; class=&quot;headerlink&quot; title=&quot;225.用队列实现栈&quot;&gt;&lt;/a&gt;225.用队列实现栈&lt;/h1&gt;&lt;p&gt;使用队列实现栈的下列操作：
      
    
    </summary>
    
    
      <category term="leetcode" scheme="https://qihuang7.top/categories/leetcode/"/>
    
    
      <category term="leetcode" scheme="https://qihuang7.top/tags/leetcode/"/>
    
      <category term="栈" scheme="https://qihuang7.top/tags/%E6%A0%88/"/>
    
      <category term="队列" scheme="https://qihuang7.top/tags/%E9%98%9F%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>每日一题：比较含退格的字符串</title>
    <link href="https://qihuang7.top/2020/04/03/leetcode/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98%EF%BC%9A%E6%AF%94%E8%BE%83%E5%90%AB%E9%80%80%E6%A0%BC%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    <id>https://qihuang7.top/2020/04/03/leetcode/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98%EF%BC%9A%E6%AF%94%E8%BE%83%E5%90%AB%E9%80%80%E6%A0%BC%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2/</id>
    <published>2020-04-03T10:52:29.000Z</published>
    <updated>2020-04-03T10:58:55.268Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><h1 id="844-比较含退格的字符串"><a href="#844-比较含退格的字符串" class="headerlink" title="844.比较含退格的字符串"></a>844.比较含退格的字符串</h1><p><strong>难度：</strong> 简单</p><p><strong>题目：</strong> 给定 S 和 T两个字符串，当它们分别被输入到空白的文本编辑器后，判断二者是否相等，并返回结果。 # 代表退格字符。</p><p><strong>示例1</strong></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：S = "ab#c", T = "ad#c"</span><br><span class="line">输出：true</span><br><span class="line">解释：S 和 T 都会变成 “ac”。</span><br></pre></td></tr></tbody></table></figure></div><p><strong>示例2</strong></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：S = "ab##", T = "c#d#"</span><br><span class="line">输出：true</span><br><span class="line">解释：S 和 T 都会变成 “”。</span><br></pre></td></tr></tbody></table></figure></div><p><strong>示例3</strong></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：S = "a##c", T = "#a#c"</span><br><span class="line">输出：true</span><br><span class="line">解释：S 和 T 都会变成 “c”。</span><br></pre></td></tr></tbody></table></figure></div><p><strong>示例4</strong></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：S = "a#c", T = "b"</span><br><span class="line">输出：false</span><br><span class="line">解释：S 会变成 “c”，但 T 仍然是 “b”。</span><br></pre></td></tr></tbody></table></figure></div><p><strong>提示：</strong></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1 <= S.length <= 200</span><br><span class="line">1 <= T.length <= 200</span><br><span class="line">S 和 T 只含有小写字母以及字符 '#'。</span><br></pre></td></tr></tbody></table></figure></div><p><strong>我的题解</strong></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">backspaceCompare</span><span class="params">(String S, String T)</span> </span>{</span><br><span class="line">        <span class="keyword">char</span>[] s = S.toCharArray();</span><br><span class="line">        <span class="keyword">char</span>[] t = T.toCharArray();</span><br><span class="line">        Stack<character> stack1 = <span class="keyword">new</span> Stack<>();</character></span><br><span class="line">        Stack<character> stack2 = <span class="keyword">new</span> Stack<>();</character></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i < s.length; i++) {</span><br><span class="line">            <span class="keyword">if</span> ((<span class="string">'#'</span> ==s[i])){</span><br><span class="line">                <span class="keyword">if</span> (!stack1.isEmpty()) {</span><br><span class="line">                    stack1.pop();</span><br><span class="line">                }</span><br><span class="line">            }<span class="keyword">else</span> stack1.push(s[i]);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i < t.length; i++) {</span><br><span class="line">            <span class="keyword">if</span> ((<span class="string">'#'</span> ==t[i])){</span><br><span class="line">                <span class="keyword">if</span> (!stack2.isEmpty()) {</span><br><span class="line">                    stack2.pop();</span><br><span class="line">                }</span><br><span class="line">            }<span class="keyword">else</span> stack2.push(t[i]);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> Arrays.equals(stack1.toArray(), stack2.toArray());</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">执行结果：通过</span><br><span class="line">执行用时 :3 ms</span><br><span class="line">内存消耗 :38.1 MB</span><br></pre></td></tr></tbody></table></figure></div><p><strong>官方题解</strong><br><strong>思想</strong><br>使用 build(S) 和 build(T) 构造去除了退格符和被删除字符后的字符串，然后比较它们是否相等。</p><p><strong>算法</strong><br>在 build(S) 中，使用栈存储每次输入的字符。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">backspaceCompare</span><span class="params">(String S, String T)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> build(S).equals(build(T));</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">build</span><span class="params">(String S)</span> </span>{</span><br><span class="line">        Stack<character> ans = <span class="keyword">new</span> Stack();</character></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">char</span> c: S.toCharArray()) {</span><br><span class="line">            <span class="keyword">if</span> (c != <span class="string">'#'</span>)</span><br><span class="line">                ans.push(c);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (!ans.empty())</span><br><span class="line">                ans.pop();</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> String.valueOf(ans);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">执行结果：通过</span><br><span class="line">执行用时 :4 ms</span><br><span class="line">内存消耗 :38 MB</span><br></pre></td></tr></tbody></table></figure></div></body></html>]]></content>
    
    <summary type="html">
    
      
      
        &lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;h1 id=&quot;844-比较含退格的字符串&quot;&gt;&lt;a href=&quot;#844-比较含退格的字符串&quot; class=&quot;headerlink&quot; title=&quot;844.比较含退格的字符串&quot;&gt;&lt;/a&gt;844.比较含退格的字符串&lt;/h1&gt;&lt;p&gt;&lt;
      
    
    </summary>
    
    
      <category term="leetcode" scheme="https://qihuang7.top/categories/leetcode/"/>
    
    
      <category term="leetcode" scheme="https://qihuang7.top/tags/leetcode/"/>
    
      <category term="栈" scheme="https://qihuang7.top/tags/%E6%A0%88/"/>
    
  </entry>
  
  <entry>
    <title>java多线程基础（二）：入门类和接口</title>
    <link href="https://qihuang7.top/2020/04/03/%E5%A4%9A%E7%BA%BF%E7%A8%8B/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%9F%BA%E7%A1%80%EF%BC%88%E4%BA%8C%EF%BC%89%EF%BC%9A%E5%85%A5%E9%97%A8%E7%B1%BB%E5%92%8C%E6%8E%A5%E5%8F%A3/"/>
    <id>https://qihuang7.top/2020/04/03/%E5%A4%9A%E7%BA%BF%E7%A8%8B/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%9F%BA%E7%A1%80%EF%BC%88%E4%BA%8C%EF%BC%89%EF%BC%9A%E5%85%A5%E9%97%A8%E7%B1%BB%E5%92%8C%E6%8E%A5%E5%8F%A3/</id>
    <published>2020-04-03T10:43:53.000Z</published>
    <updated>2020-04-04T15:35:01.984Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><h1 id="第⼆章-Java多线程⼊⻔类和接⼝"><a href="#第⼆章-Java多线程⼊⻔类和接⼝" class="headerlink" title="第⼆章 Java多线程⼊⻔类和接⼝"></a>第⼆章 Java多线程⼊⻔类和接⼝</h1><h2 id="Thread类和Runnable接口"><a href="#Thread类和Runnable接口" class="headerlink" title="Thread类和Runnable接口"></a>Thread类和Runnable接口</h2><p>实现“线程”类的两种方式</p><ul><li>继承Thread类，重写run方法</li><li>实现Runnable接口的run方法</li></ul><h3 id="继承Thread类"><a href="#继承Thread类" class="headerlink" title="继承Thread类"></a>继承Thread类</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        Thread myThread = <span class="keyword">new</span> MyThread();</span><br><span class="line">        myThread.start();</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>{</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>{</span><br><span class="line">        System.out.println(<span class="string">"MyThread"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><p><strong>调用start()方法后，该线程才算启动！</strong></p><blockquote><p>注意不可多次调⽤start()⽅法。在第⼀次调⽤start()⽅法后，再次调⽤start()<br>⽅法会抛出异常。</p></blockquote><h3 id="实现Runnable接口"><a href="#实现Runnable接口" class="headerlink" title="实现Runnable接口"></a>实现Runnable接口</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        <span class="keyword">new</span> MyThread().start();</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>{</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>{</span><br><span class="line">        System.out.println(<span class="string">"MyThread"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><h3 id="Thread类构造方法"><a href="#Thread类构造方法" class="headerlink" title="Thread类构造方法"></a>Thread类构造方法</h3><p>Thread 类是⼀个 Runnable 接⼝的实现类<br>实际情况下，我们⼤多是直接调⽤下⾯两个构造⽅法：</p><blockquote><p>Thread(Runnable target)<br>Thread(Runnable target, String name)</p></blockquote><p><strong>target</strong>：指定要执⾏的任务；<br><strong>name</strong>：线程的名字，多个线程的名字是可以重复的。默认是 “Thread-“+nextThreadNum()</p><h3 id="Thread类的几个常用方法："><a href="#Thread类的几个常用方法：" class="headerlink" title="Thread类的几个常用方法："></a>Thread类的几个常用方法：</h3><ul><li>currentThread()：静态⽅法，返回对当前正在执⾏的线程对象的引⽤；</li><li>start()：开始执⾏线程的⽅法，java虚拟机会调⽤线程内的run()⽅法；</li><li>yield()：yield在英语⾥有放弃的意思，同样，这⾥的yield()指的是<strong>当前线程愿意让出对当前处理器的占⽤</strong>。这⾥需要注意的是，就算当前线程调⽤了yield()⽅法，程序在调度的时候，也还有可能继续运⾏这个线程的；</li><li>sleep()：静态⽅法，使当前线程睡眠⼀段时间；</li><li>join()：使当前线程等待另⼀个线程执⾏完毕之后再继续执⾏，内部调⽤的是Object类的wait⽅法实现的；</li></ul><h3 id="Thread类与Runnable接口的比较："><a href="#Thread类与Runnable接口的比较：" class="headerlink" title="Thread类与Runnable接口的比较："></a>Thread类与Runnable接口的比较：</h3><ul><li>由于Java“单继承，多实现”的特性，Runnable接⼝使⽤起来⽐Thread更灵活。</li><li>Runnable接⼝出现更符合⾯向对象，将线程单独进⾏对象的封装。</li><li>Runnable接⼝出现，降低了线程对象和线程任务的耦合性。 </li><li>如果使⽤线程时不需要使⽤Thread类的诸多⽅法，显然使⽤Runnable接⼝更 为轻量。</li></ul><p>所以，我们通常优先使⽤“<strong>实现 Runnable接⼝</strong>”这种⽅式来⾃定义线程类。</p><h2 id="Callable、Future与FutureTask"><a href="#Callable、Future与FutureTask" class="headerlink" title="Callable、Future与FutureTask"></a>Callable、Future与FutureTask</h2><p>使用Runnable和Thread来创建一个新的线程有一个弊端，就<strong>是run方法是没有返回值的</strong>。而有时候我们<strong>希望开启一个线程去执行一个任务，并且这个任务执行完成后有一个返回值。</strong><br>JDK提供了Callable接口与Future类为我们解决这个问题，这也是所谓的“异步模型”</p><h3 id="Callable接口"><a href="#Callable接口" class="headerlink" title="Callable接口"></a>Callable接口</h3><p>Callable与Runnable类似，同样是只有一个抽象方法的函数式接口。不同的式Callable提供的方法是有返回值的，而且支持泛型.源码：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Callable</span><<span class="title">V</span>> </span>{</span><br><span class="line">    <span class="function">V <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>; </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><p>Callable ⼀般是配合线程池⼯具 ExecutorService 来使⽤的。</p><p>一个简单使用的demo：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ⾃定义Callable</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Task</span> <span class="keyword">implements</span> <span class="title">Callable</span><<span class="title">Integer</span>></span>{</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>{</span><br><span class="line">        <span class="comment">// 模拟计算需要⼀秒</span></span><br><span class="line">        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>{</span><br><span class="line">        <span class="comment">// 使⽤</span></span><br><span class="line">        ExecutorService executor = Executors.newCachedThreadPool();</span><br><span class="line">        Task task = <span class="keyword">new</span> Task();</span><br><span class="line">        Future<integer> result = executor.submit(task);</integer></span><br><span class="line">        <span class="comment">// 注意调⽤get⽅法会阻塞当前线程，直到得到结果。</span></span><br><span class="line">        <span class="comment">// 所以实际编码中建议使⽤可以设置超时时间的重载get⽅法。</span></span><br><span class="line">        System.out.println(result.get()); </span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><h3 id="Future接口与FutureTask类"><a href="#Future接口与FutureTask类" class="headerlink" title="Future接口与FutureTask类"></a>Future接口与FutureTask类</h3><p>FutureTask是Future接口的实现类。FutureTask 是 实现的 RunnableFuture 接⼝的，⽽ RunnableFuture 接⼝同时继承了 Runnable 接⼝ 和 Future 接⼝</p><p>实例代码：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ⾃定义Callable，与上⾯⼀样</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Task</span> <span class="keyword">implements</span> <span class="title">Callable</span><<span class="title">Integer</span>></span>{</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>{</span><br><span class="line">        <span class="comment">// 模拟计算需要⼀秒</span></span><br><span class="line">        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>{</span><br><span class="line">        <span class="comment">// 使⽤</span></span><br><span class="line">        ExecutorService executor = Executors.newCachedThreadPool();</span><br><span class="line">        FutureTask<integer> futureTask = <span class="keyword">new</span> FutureTask<>(<span class="keyword">new</span> Task());</integer></span><br><span class="line">        executor.submit(futureTask);</span><br><span class="line">        System.out.println(futureTask.get());</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div></body></html>]]></content>
    
    <summary type="html">
    
      
      
        &lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;h1 id=&quot;第⼆章-Java多线程⼊⻔类和接⼝&quot;&gt;&lt;a href=&quot;#第⼆章-Java多线程⼊⻔类和接⼝&quot; class=&quot;headerlink&quot; title=&quot;第⼆章 Java多线程⼊⻔类和接⼝&quot;&gt;&lt;/a&gt;第⼆章 Java多线
      
    
    </summary>
    
    
      <category term="java基础" scheme="https://qihuang7.top/categories/java%E5%9F%BA%E7%A1%80/"/>
    
      <category term="多线程" scheme="https://qihuang7.top/categories/java%E5%9F%BA%E7%A1%80/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
    
      <category term="java" scheme="https://qihuang7.top/tags/java/"/>
    
      <category term="基础" scheme="https://qihuang7.top/tags/%E5%9F%BA%E7%A1%80/"/>
    
      <category term="多线程" scheme="https://qihuang7.top/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
      <category term="并发" scheme="https://qihuang7.top/tags/%E5%B9%B6%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>Spring基础（一）：控制反转IOC与依赖注入（DI）</title>
    <link href="https://qihuang7.top/2020/04/03/%E6%A1%86%E6%9E%B6/Spring%E5%9F%BA%E7%A1%80%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9A%E6%8E%A7%E5%88%B6%E5%8F%8D%E8%BD%ACIOC%E4%B8%8E%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5%EF%BC%88DI%EF%BC%89/"/>
    <id>https://qihuang7.top/2020/04/03/%E6%A1%86%E6%9E%B6/Spring%E5%9F%BA%E7%A1%80%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9A%E6%8E%A7%E5%88%B6%E5%8F%8D%E8%BD%ACIOC%E4%B8%8E%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5%EF%BC%88DI%EF%BC%89/</id>
    <published>2020-04-03T10:24:39.000Z</published>
    <updated>2020-04-04T15:34:35.338Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><h1 id="IOC控制反转与DI依赖注入"><a href="#IOC控制反转与DI依赖注入" class="headerlink" title="IOC控制反转与DI依赖注入"></a>IOC控制反转与DI依赖注入</h1><p>IOC： Inversion of control 反转控制。 比如以前创建一个对象，需要自己主动new 一个对象，通过IOC，对象的创建交由Spring框架 创建，开发人员直接使用已经创建好的对象。</p><p>DI： Dependency Injection 依赖注入。 通过IOC创建对象的时候，可以注入字符串甚至其他对象。 比如DAO就会注入session factory.</p><p>通常IOC和DI是紧密结合，一起使用的 </p><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//接口</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> interface <span class="title">UserDao</span><span class="params">()</span></span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">say</span><span class="params">()</span></span>;</span><br><span class="line">}</span><br><span class="line"><span class="comment">//实现类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title">UserDao</span></span>{</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">say</span><span class="params">()</span> </span>{</span><br><span class="line">System.out.println(<span class="string">"uesrDao say hello world!"</span>);</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">xml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><!-- applicationContext配置文件</span></span><br><span class="line"><span class="comment">    <bean> 配置需要创建的对象</span></span><br><span class="line"><span class="comment">id ：用于之后从spring容器获得实例时使用的</span></span><br><span class="line"><span class="comment">class ：需要创建实例的全限定类名</span></span><br><span class="line"><span class="comment">--></span></span><br><span class="line"><span class="meta"><!--?xml version="1.0" encoding="UTF-8"?--></span></span><br><span class="line"><span class="tag"><<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans        http://www.springframework.org/schema/beans/spring-beans-3.2.xsd"</span>></span></span><br><span class="line">    <span class="tag"><<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userDao"</span> <span class="attr">class</span>=<span class="string">"com.itheima.ioc.UserDaoImpl"</span>/></span></span><br><span class="line"><span class="tag"><!--<span class="name"-->beans</span>></span><br></pre></td></tr></tbody></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//测试类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestIoc</span> </span>{</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">ApplicationContext applicationContext = </span><br><span class="line"><span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"applicationContext.xml"</span>);</span><br><span class="line">UserDao userDao = (UserDao) applicationContext.getBean(<span class="string">"userDao"</span>);</span><br><span class="line">userDao.say();</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><h2 id="依赖注入（DI：Dependency-Injection）"><a href="#依赖注入（DI：Dependency-Injection）" class="headerlink" title="依赖注入（DI：Dependency Injection）"></a>依赖注入（DI：Dependency Injection）</h2><p>依赖注入与控制反转的含义相同，只不过是从两个角度描述的同一个概念</p><ul><li>在使用Spring框架之后，对象的实例不再由调用者来创建，而是由Spring容器来创建，<strong>Spring容器会负责控制程序之间的关系，而不是由调用者的程序代码直接控制</strong>。这样，<strong>控制权由应用代码转移到了Spring</strong>，控制权发送了反转，这就是Spring的控制反转。</li><li>从Spring容器的角度来看，<strong>Spring容器负责将被依赖对象赋值给调用者的成员变量</strong>，这相当于调用者注入了它依赖的实例，这就是Spring的依赖注入。</li></ul><h3 id="实现方式："><a href="#实现方式：" class="headerlink" title="实现方式："></a>实现方式：</h3><p><strong>属性setter方法注入：</strong></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> interface <span class="title">UserService</span><span class="params">()</span></span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">say</span><span class="params">()</span></span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span></span>{</span><br><span class="line"><span class="keyword">private</span> UserDao userDao;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserDao</span><span class="params">(UserDao userDao)</span> </span>{</span><br><span class="line"><span class="keyword">this</span>.userDao = userDao;</span><br><span class="line">}</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">say</span><span class="params">()</span> </span>{</span><br><span class="line"><span class="keyword">this</span>.userDao.say();</span><br><span class="line">System.out.println(<span class="string">"userService say hello World!"</span>);</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><p>在配置文件applicationContext.xml中添加id为userService的Bean并将userDao注入</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">xml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><!--    <property> 用于进行属性注入</span></span><br><span class="line"><span class="comment">        name： bean的属性名，通过setter方法获得</span></span><br><span class="line"><span class="comment">            setBookDao ##> BookDao  ##> bookDao</span></span><br><span class="line"><span class="comment">        ref ：另一个bean的id值的引用</span></span><br><span class="line"><span class="comment">--></span></span><br><span class="line"><span class="tag"><<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userService"</span> <span class="attr">class</span>=<span class="string">"com.itheima.ioc.UserServiceImpl"</span>></span></span><br><span class="line">        <span class="tag"><<span class="name">property</span> <span class="attr">name</span>=<span class="string">"userDao"</span> <span class="attr">ref</span>=<span class="string">"userDao"</span>></span><span class="tag"><!--<span class="name"-->property</span>></span><br><span class="line"><span class="tag"><!--<span class="name"-->bean</span>></span><br></pre></td></tr></tbody></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//测试DI</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDI</span> </span>{</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">ApplicationContext applicationContext = </span><br><span class="line"><span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"applicationContext.xml"</span>);</span><br><span class="line">UserService userService = (UserService) applicationContext.getBean(<span class="string">"userService"</span>);</span><br><span class="line">userService.say();</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><p><strong>构造方法注入：</strong></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">()</span> </span>{</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    }</span><br></pre></td></tr></tbody></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">xml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag"><<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"user"</span> <span class="attr">class</span>=<span class="string">"com.kuang.pojo.User"</span>></span></span><br><span class="line">    <span class="tag"><<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"张三"</span>/></span></span><br><span class="line">    <span class="tag"><<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"age"</span> <span class="attr">value</span>=<span class="string">"21"</span>/></span>></span><br><span class="line"><span class="tag"><!--<span class="name"-->bean</span>></span><br></pre></td></tr></tbody></table></figure></div></body></html>]]></content>
    
    <summary type="html">
    
      
      
        &lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;h1 id=&quot;IOC控制反转与DI依赖注入&quot;&gt;&lt;a href=&quot;#IOC控制反转与DI依赖注入&quot; class=&quot;headerlink&quot; title=&quot;IOC控制反转与DI依赖注入&quot;&gt;&lt;/a&gt;IOC控制反转与DI依赖注入&lt;/h1&gt;
      
    
    </summary>
    
    
      <category term="框架" scheme="https://qihuang7.top/categories/%E6%A1%86%E6%9E%B6/"/>
    
      <category term="spring" scheme="https://qihuang7.top/categories/%E6%A1%86%E6%9E%B6/spring/"/>
    
    
      <category term="基础" scheme="https://qihuang7.top/tags/%E5%9F%BA%E7%A1%80/"/>
    
      <category term="SSM" scheme="https://qihuang7.top/tags/SSM/"/>
    
      <category term="spring" scheme="https://qihuang7.top/tags/spring/"/>
    
  </entry>
  
  <entry>
    <title>每日一题：和为s的连续正数序列</title>
    <link href="https://qihuang7.top/2020/04/02/leetcode/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98%EF%BC%9A%E5%92%8C%E4%B8%BAs%E7%9A%84%E8%BF%9E%E7%BB%AD%E6%AD%A3%E6%95%B0%E5%BA%8F%E5%88%97/"/>
    <id>https://qihuang7.top/2020/04/02/leetcode/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98%EF%BC%9A%E5%92%8C%E4%B8%BAs%E7%9A%84%E8%BF%9E%E7%BB%AD%E6%AD%A3%E6%95%B0%E5%BA%8F%E5%88%97/</id>
    <published>2020-04-02T12:52:29.000Z</published>
    <updated>2020-04-03T10:35:02.336Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><h1 id="和为s的连续正数序列"><a href="#和为s的连续正数序列" class="headerlink" title="和为s的连续正数序列"></a>和为s的连续正数序列</h1><p>输入一个正整数 target ，输出所有和为 target 的连续正整数序列（至少含有两个数）。</p><p>序列内的数字由小到大排列，不同序列按照首个数字从小到大排列。</p><p><strong>示例 1：</strong></p><blockquote><p>输入：target = 9<br>输出：[[2,3,4],[4,5]]</p></blockquote><p><strong>示例 2：</strong></p><blockquote><p>输入：target = 15<br>输出：[[1,2,3,4,5],[4,5,6],[7,8]]</p></blockquote><h2 id="解题思路：-滑动窗口"><a href="#解题思路：-滑动窗口" class="headerlink" title="解题思路：(滑动窗口)"></a>解题思路：(滑动窗口)</h2><h3 id="什么是滑动窗口"><a href="#什么是滑动窗口" class="headerlink" title="什么是滑动窗口"></a>什么是滑动窗口</h3><p>滑动窗口可以看成数组中框起来的一个部分。在一些数组类题目中，我们可以用滑动窗口来观察可能的候选结果。当滑动窗口从数组的左边滑到了右边，我们就可以从所有的候选结果中找到最优的结果。</p><p>对于这道题来说，数组就是正整数序列 [1,2,3,…,n]。我们设滑动窗口的左边界为 i，右边界为 j，则滑动窗口框起来的是一个左闭右开区间 [i,j)。注意，为了编程的方便，滑动窗口一般表示成一个左闭右开区间。在一开始，i=1,j=1，滑动窗口位于序列的最左侧，窗口大小为零。</p><p><a href="https://pic.leetcode-cn.com/af4821c41d5b093e6a41ad5602208f9e7057cc1b002cd0053de71bc9a0e35b12.jpg" data-fancybox="group" data-caption="滑动窗口" class="fancybox"><img alt="滑动窗口" title="滑动窗口" data-src="https://pic.leetcode-cn.com/af4821c41d5b093e6a41ad5602208f9e7057cc1b002cd0053de71bc9a0e35b12.jpg" class="lazyload"></a></p><p>滑动窗口的重要性质是：<strong>窗口的左边界和右边界永远只能向右移动</strong>，而不能向左移动。这是为了保证滑动窗口的时间复杂度是 O(n)。如果左右边界向左移动的话，这叫做“回溯”，算法的时间复杂度就可能不止 O(n)。</p><p>在这道题中，我们关注的是滑动窗口中所有数的和。当滑动窗口的右边界向右移动时，也就是 j = j + 1，窗口中多了一个数字 j，窗口的和也就要加上 j。当滑动窗口的左边界向右移动时，也就是 i = i + 1，窗口中少了一个数字 i，窗口的和也就要减去 i。滑动窗口只有 右边界向右移动（扩大窗口） 和 左边界向右移动（缩小窗口） 两个操作，所以实际上非常简单。</p><p>要用滑动窗口解这道题，我们要回答两个问题：</p><ul><li>第一个问题，窗口何时扩大，何时缩小？</li><li>第二个问题，滑动窗口能找到全部的解吗？</li></ul><p>对于第一个问题，回答非常简单：</p><ul><li>当窗口的和<strong>小于 target</strong> 的时候，窗口的和需要增加，所以要扩大窗口，窗口的右边界向右移动</li><li>当窗口的和<strong>大于 target</strong> 的时候，窗口的和需要减少，所以要缩小窗口，窗口的左边界向右移动</li><li>当窗口的和恰好<strong>等于 target</strong> 的时候，我们需要记录此时的结果。设此时的窗口为 [i,j)，那么我们已经找到了一个 i 开头的序列，也是唯一一个 i 开头的序列，接下来需要找 i+1 开头的序列，所以窗口的左边界要向右移动</li></ul><p>对于第二个问题，我们可以稍微简单地证明一下：</p><p><a href="https://pic.leetcode-cn.com/728c705889a672d5a85709cb3fd157216bb1a41dc377dcc125818d9e18b8dd55.jpg" data-fancybox="group" data-caption="滑动窗口" class="fancybox"><img alt="滑动窗口" title="滑动窗口" data-src="https://pic.leetcode-cn.com/728c705889a672d5a85709cb3fd157216bb1a41dc377dcc125818d9e18b8dd55.jpg" class="lazyload"></a></p><p>我们一开始要找的是 1 开头的序列，只要窗口的和小于 target，窗口的右边界会一直向右移动。假设 1+2+⋯+8小于target，再加上一个 9之后， 发现 1+2+⋯+8+9又大于target了。这说明1开头的序列找不到解。此时滑动窗口的最右元素是 9。</p><p>接下来，我们需要找2开头的序列，我们发现，2+⋯+8 < 1+2+⋯+8 < target2。这说明 2 开头的序列至少要加到9。那么，我们只需要把原先1 ~ 9的滑动窗口的左边界向右移动，变成 2 ~ 9的滑动窗口，然后继续寻找。而右边界完全不需要向左移动。</p><p>以此类推，滑动窗口的左右边界都不需要向左移动，所以这道题用滑动窗口一定可以得到所有的解。<strong>时间复杂度是 O(n)。</strong></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[][] findContinuousSequence(<span class="keyword">int</span> target) {</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">1</span>; <span class="comment">// 滑动窗口的左边界</span></span><br><span class="line">        <span class="keyword">int</span> j = <span class="number">1</span>; <span class="comment">// 滑动窗口的右边界</span></span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>; <span class="comment">// 滑动窗口中数字的和</span></span><br><span class="line">        List<<span class="keyword">int</span>[]> res = <span class="keyword">new</span> ArrayList<>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (i <= target / <span class="number">2</span>) {</span><br><span class="line">            <span class="keyword">if</span> (sum < target) {</span><br><span class="line">                <span class="comment">// 右边界向右移动</span></span><br><span class="line">                sum += j;</span><br><span class="line">                j++;</span><br><span class="line">            } <span class="keyword">else</span> <span class="keyword">if</span> (sum > target) {</span><br><span class="line">                <span class="comment">// 左边界向右移动</span></span><br><span class="line">                sum -= i;</span><br><span class="line">                i++;</span><br><span class="line">            } <span class="keyword">else</span> {</span><br><span class="line">                <span class="comment">// 记录结果</span></span><br><span class="line">                <span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[j-i];</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> k = i; k < j; k++) {</span><br><span class="line">                    arr[k-i] = k;</span><br><span class="line">                }</span><br><span class="line">                res.add(arr);</span><br><span class="line">                <span class="comment">// 左边界向右移动</span></span><br><span class="line">                sum -= i;</span><br><span class="line">                i++;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> res.toArray(<span class="keyword">new</span> <span class="keyword">int</span>[res.size()][]);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div></body></html>]]></content>
    
    <summary type="html">
    
      
      
        &lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;h1 id=&quot;和为s的连续正数序列&quot;&gt;&lt;a href=&quot;#和为s的连续正数序列&quot; class=&quot;headerlink&quot; title=&quot;和为s的连续正数序列&quot;&gt;&lt;/a&gt;和为s的连续正数序列&lt;/h1&gt;&lt;p&gt;输入一个正整数 targe
      
    
    </summary>
    
    
      <category term="leetcode" scheme="https://qihuang7.top/categories/leetcode/"/>
    
    
      <category term="leetcode" scheme="https://qihuang7.top/tags/leetcode/"/>
    
      <category term="数组" scheme="https://qihuang7.top/tags/%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
</feed>
